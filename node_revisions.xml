<?xml version="1.0" encoding="utf-8" ?>
<!--
-
- phpMyAdmin XML Dump
- version 2.11.9.5
- http://www.phpmyadmin.net
-
- Host: dc2-mysql-01.kattare.com
- Generation Time: Jun 24, 2010 at 02:41 PM
- Server version: 5.1.40
- PHP Version: 5.2.13
-->

<!--
- Database: 'cionokto'
-->
<cionokto>
  <!-- Table node_revisions -->
    <node_revisions>
        <nid>1</nid>
        <vid>1</vid>
        <uid>4</uid>
        <title>Home</title>
        <body>&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; id=&quot;grabber&quot;&gt;&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;images/main.jpg&quot; height=&quot;247&quot; width=&quot;293&quot; alt=&quot;Troll Nut&quot;/&gt;&lt;/td&gt;
    &lt;td class=&quot;midcontent&quot;&gt;
      &lt;h1&gt;Vibrant Web Interfaces. Deep Server Integration&lt;/h1&gt;
      &lt;p&gt;The &lt;a href=&quot;freestyle&quot; title=&quot;Freestyle&quot; style=&quot;color:#552;&quot;&gt;Freestyle Webtop Framework&lt;/a&gt; makes it possible to create &lt;strong style=&quot;color:#552;&quot;&gt;rich, dynamic web applications&lt;/strong&gt; without the complexity of traditional methods. Using our simple, component-based toolkit, you'll be able to create &lt;strong style=&quot;color:#552;&quot;&gt;attractive, modern web applications&lt;/strong&gt; quickly and easily.&lt;/p&gt;
      &lt;p&gt;Interested? Check out the &lt;a href=&quot;freestyle&quot; title=&quot;Freestyle&quot; style=&quot;color:#552;&quot;&gt;Freestyle&lt;/a&gt; page for more information, or sign up for our &lt;a href=&quot;announce_list&quot; title=&quot;Mailing List&quot; style=&quot;color:#552;&quot;&gt;mailing list&lt;/a&gt; to be notified about our upcoming beta release!&lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;!--break--&gt;</body>
        <teaser>&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; id=&quot;grabber&quot;&gt;&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;images/main.jpg&quot; height=&quot;247&quot; width=&quot;293&quot; alt=&quot;Troll Nut&quot;/&gt;&lt;/td&gt;
    &lt;td class=&quot;midcontent&quot;&gt;
      &lt;h1&gt;Vibrant Web Interfaces. Deep Server Integration&lt;/h1&gt;
      &lt;p&gt;The &lt;a href=&quot;freestyle&quot; title=&quot;Freestyle&quot; style=&quot;color:#552;&quot;&gt;Freestyle Webtop Framework&lt;/a&gt; makes it possible to create &lt;strong style=&quot;color:#552;&quot;&gt;rich, dynamic web applications&lt;/strong&gt; without the complexity of traditional methods. Using our simple, component-based toolkit, you'll be able to create &lt;strong style=&quot;color:#552;&quot;&gt;attractive, modern web applications&lt;/strong&gt; quickly and easily.&lt;/p&gt;
      &lt;p&gt;Interested? Check out the &lt;a href=&quot;freestyle&quot; title=&quot;Freestyle&quot; style=&quot;color:#552;&quot;&gt;Freestyle&lt;/a&gt; page for more information, or sign up for our &lt;a href=&quot;announce_list&quot; title=&quot;Mailing List&quot; style=&quot;color:#552;&quot;&gt;mailing list&lt;/a&gt; to be notified about our upcoming beta release!&lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</teaser>
        <timestamp>1164854733</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>3</nid>
        <vid>3</vid>
        <uid>4</uid>
        <title>Freestyle Webtop Toolkit</title>
        <body>&lt;!-- 
&lt;a style=&quot;display:block; width:300px; margin:0 auto;border:4px solid #D70;background-color:#F92;color:#000;text-align:center;text-decoration:none;font-weight:normal;font-size:1.3em;&quot; href=&quot;/freestyle/demo&quot; title=&quot;Freestyle Demos&quot;&gt;Click here to see the Freestyle demo!&lt;/a&gt; 
--&gt;

&lt;div class=&quot;diagram left&quot;&gt;
&lt;img src=&quot;/images/freestyle.png&quot; alt=&quot;Freestyle&quot; height=&quot;73&quot; width=&quot;237&quot;/&gt;
&lt;/div&gt;
&lt;p&gt;Freestyle reduces the complexity of deploying a user interface to the browser by erasing the client-server divide entirely. This means serious enterprise-class applications, &lt;em&gt;without&lt;/em&gt; having to worry about cross-browser compatibility, &lt;em&gt;without&lt;/em&gt; client-side scripting, and &lt;em&gt;without&lt;/em&gt; DHTML/AJAX. We believe in &lt;a href='javascript:void(0)'&gt;building applications&lt;/a&gt; just like you would for a .Net, Java, or Ruby desktop. The only difference is, with Freestyle, you deliver them over the web.&lt;/p&gt;

&lt;!--break--&gt;

&lt;h2&gt;In-Depth: Why Freestyle?&lt;/h2&gt;
&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;Anyone who has used a full-featured UI toolkit such as Swing or WinForms knows that there is a fundamental (and not-so-pleasant) difference between the way you develop applications for the desktop and the way you develop applications for the web. Even with the recent advances in client scripting techniques such as AJAX, writing web applications, when compared to their desktop counterparts is at best frustrating; at worst excruciating. The reason is simple: Web applications as they are currently developed are &lt;em&gt;based on page requests&lt;/em&gt; across the client-server divide, which have very serious drawbacks when it comes to building and maintaining a decent user interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Custom Protocols&lt;/strong&gt;
&lt;p&gt;Page-based architectures require the developer to manually implement the logic that generates the page required by a given request. This an inescapable fact of their design. The server accepts a set of input parameters, and returns html (or xml in the case of AJAX). There are many tools on many platforms to aid in this endeavor, but they have the same basic structure input(parameters) output(html/xml). In effect, this means that code handling the request must implement a &lt;em&gt;custom protocol&lt;/em&gt; for each page request that the application wishes to serve.&lt;/p&gt;

&lt;div class=&quot;diagram right&quot;&gt;
   &lt;img src=&quot;/images/protocol-std.png&quot; alt=&quot;Standard Page-Based Protocol&quot;/&gt;
   &lt;div&gt;Fig 1. Classic AJAX Micro-Page Model&lt;/div&gt;
   &lt;div&gt;Developer is forced to implement A, B, and C&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;AJAX applications improve performance, and UI responsiveness by decomposing the scope of their page-requests into small chunks, &lt;em&gt;or micro-pages&lt;/em&gt; and then integrating those micro-pages into the enclosing page. Fundamentally however, they are &lt;em&gt;still page-request based&lt;/em&gt;, and the server code handling AJAX requests must &lt;strong&gt;&lt;em&gt;still code around the client-server divide&lt;/em&gt;&lt;/strong&gt;. It must implement a custom protocol for each request to accept the proper inputs and respond with the proper XML.&lt;/p&gt;

&lt;p&gt;Regardless of how it is bandaged, there remains an inherent tedium in the process of first defining and then implementing (on both client and server) which input parameters the client will send with a request, and what will be the form of the server's response that the client knows what to do with it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Client Driven&lt;/strong&gt;

&lt;p&gt;Another serious drawback to building web interfaces with both classic and more recent techniques is that &lt;em&gt;they must be implemented in the paucity of the browser runtime&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The javascript language was designed from its inception to derive most of its functionality by binding to objects implemented in other runtimes. As a result, its standard library is sparse almost to the point of non-existence in that it lacks many vitally useful objects like Sets, LinkedLists, and true Hashes and these are only the basics! Lacking the solid fundamentals provided by server-side environments, most applications that make extensive use of DHTML and javascript end up implementing a hodge-podge of non-standard solutions for common work-a-day programming tasks that would have been provided to them under any normal circumstances.&lt;/p&gt;

&lt;p&gt;For resources and libraries that are only available on the server, a custom page-request must be designed and implemented to present those resources to the client.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Custom Data Marshaling&lt;/strong&gt;
&lt;p&gt;As a direct result of the system being developed for two separate runtimes, there must be logic to translate data from a form suitable for the client into a form suitable for the server &lt;em&gt;and vice-a-versa&lt;/em&gt;. There are many &quot;helper&quot; tools for doing this, but it still remains a burden to the developer, and a necessary part to consider when implementing the custom page protocols that constitute a web application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The Freestyle difference&lt;/h3&gt;
&lt;p&gt;Freestyle takes a different approach. Rather than treating your application as a sequence of pages, or micro-pages which must each implemented on the server, and requested by custom code on the client, Freestyle applications are &lt;em&gt;component-oriented&lt;/em&gt;. They are built with first-class user interface objects which reside on the server, and are programmed by the developer to &lt;em&gt;react directly to user input.&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;No Custom Protocols&lt;/strong&gt;

&lt;p&gt;The freestyle server handles all client interaction in a generic fashion, so that the application developer need not worry about how to implement a custom page request. &lt;em&gt;By the very action&lt;/em&gt; of connecting &lt;a href=&quot;/freestyle/architecture/events&quot;&gt;user interface events&lt;/a&gt; to application logic, he is specifying both the protocol and its implementation in one clean step.&lt;/p&gt;

&lt;div class=&quot;diagram right&quot;&gt;
  &lt;img src=&quot;/images/protocol-fs.png&quot; alt=&quot;Freestyle Client/Server Model&quot;/&gt;
  &lt;div&gt;Fig 2. Freestyle Model&lt;/div&gt;
  &lt;div&gt;Developer only implements Server Components&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Server Driven&lt;/strong&gt;

&lt;p&gt;In applications built with Freestyle, all application logic is specified on the server, not the client, so that the entire server-side runtime is available &lt;em&gt;all the time&lt;/em&gt;. This means that for applications written in Java, for example, the developer is free to leverage all the core JRE classes, as well as any preferred third-party libraries he may wish to include.&lt;/p&gt;

&lt;p&gt;It also means that access to server-only resources such as files and databases is implicit. There is no need to wrap simple database requests with custom micro-pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;No Custom Data Marshaling&lt;/strong&gt;
&lt;p&gt;Server-side runtimes such as the JVM already come with a way of passing data to application logic, &lt;em&gt;the built-in data types&lt;/em&gt;. Freestyle applications always deal with data in the form in which it appears on the server, be it simple strings and integers, or more complicated user-defined types.&lt;/p&gt;
&lt;/li&gt;

&lt;/ul&gt;

&lt;h3&gt;The Way Forward&lt;/h3&gt;
&lt;p&gt;Freestyle introduces a new way to develop your applications by building on the time-tested strategy of single-runtime, component-oriented user interface design; the same strategy employed by all modern user-interface toolkits. Forget about developing web applications. With Freestyle, you develop for the desktop, but &lt;em&gt;deploy over the web.&lt;/em&gt;&lt;/p&gt;
</body>
        <teaser></teaser>
        <timestamp>1165179570</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>2</nid>
        <vid>2</vid>
        <uid>2</uid>
        <title>Admin Menu</title>
        <body>&lt;?php
$menu = menu_get_menu();
foreach($menu[&quot;items&quot;][0][&quot;children&quot;] as $k) {
   if ($menu[&quot;items&quot;][$k][&quot;title&quot;] == &quot;Navigation&quot;) {
      $mid = $k;
   }
}
print theme('menu_tree', $mid);
?&gt;
&lt;?php
//$block = module_invoke('block', 'block', 'view', 2);
//print $block['content'];
?&gt;</body>
        <teaser>&lt;?php
$menu = menu_get_menu();
foreach($menu[&quot;items&quot;][0][&quot;children&quot;] as $k) {
   if ($menu[&quot;items&quot;][$k][&quot;title&quot;] == &quot;Navigation&quot;) {
      $mid = $k;
   }
}
print theme('menu_tree', $mid);
?&gt;
&lt;?php
//$block = module_invoke('block', 'block', 'view', 2);
//print $block['content'];
?&gt;</teaser>
        <timestamp>1182000407</timestamp>
        <format>2</format>
    </node_revisions>
    <node_revisions>
        <nid>5</nid>
        <vid>5</vid>
        <uid>4</uid>
        <title>About The Front Side</title>
        <body>&lt;p&gt;The Frontside Software, Inc. is a software services company founded in October of 2005. We have both extensive and diverse experience writing &lt;strong&gt;enterprise class&lt;/strong&gt; software using high-productivity &lt;strong&gt;agile  development methods&lt;/strong&gt;. Our goal is to create and help others create high-quality software, with a focus on useful and innovative tools for web developers.&lt;/p&gt;
&lt;div class=&quot;about-profiles&quot;&gt;
&lt;?php
function tfs_theme_about_profile($uid) {
  $user = user_load(array('uid'=&gt;$uid));
  if (!$user) { return; }
  profile_load_profile($user);
  echo &quot;&lt;div class='about-profile'&gt;\n&quot;;
  if ($user-&gt;picture) {
    echo &quot;&lt;img src='/$user-&gt;picture' alt='' class='about-picture'/&gt;\n&quot;;
  } else {
    echo &quot;&lt;img src='/images/whodat.png' alt='' class='about-picture'/&gt;\n&quot;;
  }
  if ($user-&gt;profile_full_name) {
    echo &quot;&lt;h2 class='about-fullname'&gt;$user-&gt;profile_full_name&lt;/h2&gt;\n&quot;;
  } else {
    echo &quot;&lt;h2 class='about-fullname'&gt;$user-&gt;name&lt;/h2&gt;\n&quot;;
  }
  if ($user-&gt;profile_location) {
    echo &quot;&lt;div class='about-location'&gt;$user-&gt;profile_location&lt;/div&gt;\n&quot;;
  }
  if ($user-&gt;profile_resume) {
    echo &quot;&lt;div class='about-resume'&gt;&lt;a href='$user-&gt;profile_resume' &quot; .
         &quot;title='$user-&gt;profile_full_name&amp;apos;s Resume'&gt;&quot; .
         &quot;View Resume&lt;/a&gt;&lt;/div&gt;\n&quot;;
  }
  if ($user-&gt;profile_bio) {
    echo &quot;&lt;p class='about-bio'&gt;$user-&gt;profile_bio&lt;/p&gt;\n&quot;;
  }
  echo &quot;&lt;/div&gt;\n&quot;;
}
tfs_theme_about_profile(4);
tfs_theme_about_profile(2);
//tfs_theme_about_profile(3); //tdirrenb
?&gt;
&lt;/div&gt;
&lt;p class='about-contact'&gt;Contact us &lt;a href=&quot;/contact&quot;&gt;here&lt;/a&gt;. We'd love to hear from you!&lt;/p&gt;</body>
        <teaser></teaser>
        <timestamp>1181664704</timestamp>
        <format>2</format>
    </node_revisions>
    <node_revisions>
        <nid>6</nid>
        <vid>6</vid>
        <uid>2</uid>
        <title>Support</title>
        <body>&lt;p&gt;We'll have links to our javadocs, tutorials, forums and all that here.&lt;/p&gt;</body>
        <teaser>&lt;p&gt;We'll have links to our javadocs, tutorials, forums and all that here.&lt;/p&gt;</teaser>
        <timestamp>1182000473</timestamp>
        <format>3</format>
    </node_revisions>
    <node_revisions>
        <nid>23</nid>
        <vid>23</vid>
        <uid>2</uid>
        <title>Announcements Mailing List</title>
        <body>&lt;strong&gt;The tfs-announcements mailing list&lt;/strong&gt; has been created for those interested in announcements relating to the Freestyle Webtop Framework. Topics on the list will initially include details about our forthcoming beta release, and will later include any release, security, or other announcements of interest to Freestyle users.

More information and a subscription form are available on the &lt;a href=&quot;/announce_list&quot; title=&quot;Announcements Mailing List&quot;&gt;Announcements Mailing List&lt;/a&gt; page.</body>
        <teaser>The tfs-announcements mailing list is now available!</teaser>
        <timestamp>1153007441</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>44</nid>
        <vid>50</vid>
        <uid>2</uid>
        <title>Access Denied</title>
        <body>I hate to be the one to tell you this, but you aren't allowed to access this page. Assuming you're not trying to do something unpleasant to the site, you probably just neglected to log in as a user with the appropriate privileges.</body>
        <teaser></teaser>
        <timestamp>1152571913</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>10</nid>
        <vid>10</vid>
        <uid>2</uid>
        <title>Architecture</title>
        <body>&lt;p&gt;Freestyle delivers a fully-featured GUI toolkit for deploying desktop applications over the web. It comes bundled with all the features you would expect from a client-side library, including rich &lt;a href=&quot;/freestyle/architecture/components&quot;&gt;component&lt;/a&gt; hierarchies, complete with component level &lt;a href=&quot;/freestyle/architecture/events&quot;&gt;events&lt;/a&gt;&lt;/p&gt;</body>
        <teaser>&lt;p&gt;Freestyle delivers a fully-featured GUI toolkit for deploying desktop applications over the web. It comes bundled with all the features you would expect from a client-side library, including rich &lt;a href=&quot;/freestyle/architecture/components&quot;&gt;component&lt;/a&gt; hierarchies, complete with component level &lt;a href=&quot;/freestyle/architecture/events&quot;&gt;events&lt;/a&gt;&lt;/p&gt;</teaser>
        <timestamp>1153012409</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>22</nid>
        <vid>22</vid>
        <uid>2</uid>
        <title>The Front Side Introduces the Freestyle Webtop Framework</title>
        <body>&lt;strong&gt;The Front Side Software, Inc.&lt;/strong&gt; is proud to announce the Freestyle Webtop Framework, its new product for rapid web application development.

The Freestyle Webtop Framework runs in any Java servlet container, and enables the creation of rich, dynamic web applications using a set of simple Java UI components. Presentation templates are created using standard X/HTML and CSS; there's no need to learn any custom XML formats. The framework leverages a powerful javascript toolkit to allow complex event-handling and dynamic updating without writing a single line of client-side code.
&lt;!--break--&gt;
Currently available documentation includes:
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/freestyle&quot; title=&quot;Overview&quot;&gt;Freestyle Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/freestyle/architecture&quot; title=&quot;Overview&quot;&gt;Freestyle Architecture&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/docs/java&quot; title=&quot;Overview&quot;&gt;Freestyle Javadoc API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</body>
        <teaser>&lt;strong&gt;The Front Side Software, Inc.&lt;/strong&gt; is proud to announce the Freestyle Webtop Framework, its new product for rapid web application development.

The Freestyle Webtop Framework runs in any Java servlet container, and enables the creation of rich, dynamic web applications using a set of simple Java UI components. Presentation templates are created using standard X/HTML and CSS; there's no need to learn any custom XML formats. The framework leverages a powerful javascript toolkit to allow complex event-handling and dynamic updating without writing a single line of client-side code.
</teaser>
        <timestamp>1146874582</timestamp>
        <format>1</format>
    </node_revisions>
    <node_revisions>
        <nid>14</nid>
        <vid>14</vid>
        <uid>2</uid>
        <title>Freestyle Teaser Block</title>
        <body>The Freestyle GUI toolkit enables you to develop serious webtop applications, &lt;em&gt;without&lt;/em&gt; having to worry about cross-browser compatibility, &lt;em&gt;without&lt;/em&gt; client-side scripting, and &lt;em&gt;without&lt;/em&gt; DHTML/AJAX.
&lt;a href=&quot;/freestyle&quot; class=&quot;more&quot;&gt;more...&lt;/a&gt;</body>
        <teaser></teaser>
        <timestamp>1182000368</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>15</nid>
        <vid>15</vid>
        <uid>2</uid>
        <title>Resources Block</title>
        <body>&amp;raquo; &lt;a href=&quot;/blog&quot; title=&quot;Overview&quot;&gt;The Frontside Software Blog&lt;/a&gt;&lt;br/&gt;
&amp;raquo; &lt;a href=&quot;/freestyle&quot; title=&quot;Overview&quot;&gt;Freestyle Webtop Framework&lt;/a&gt;&lt;br/&gt;
&amp;raquo; &lt;a href=&quot;/announce_list&quot; title=&quot;Mailing List&quot;&gt;Announcements Mailing List&lt;/a&gt;&lt;br/&gt;</body>
        <teaser></teaser>
        <timestamp>1182000317</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>18</nid>
        <vid>18</vid>
        <uid>2</uid>
        <title>Style</title>
        <body>&lt;p&gt;Since &lt;a href=&quot;/freestyle/architecture/components&quot;&gt;Freestyle components&lt;/a&gt; use HTML to describe their views, it follows naturally that they should use CSS properties to style those views. To manage which CSS properties are applied to which component's views, Freestyle makes use of stylesheets.&lt;/p&gt;
&lt;!--break--&gt;

&lt;h3&gt;Basics&lt;/h3&gt;

&lt;p&gt;Every Component has a list of styles. Some examples of styles are &quot;textfield&quot;, &quot;focused&quot;, &quot;hover.&quot; There is no limit to the number of styles that a component may have; they can be added and removed with the &lt;code&gt;addStyle()&lt;/code&gt; and &lt;code&gt;removeStyle()&lt;/code&gt; methods.&lt;/p&gt;

&lt;p&gt;Styles are used when evaluating stylesheet selectors to determine which rules in a stylesheet apply to a given component.&lt;/p&gt;

&lt;h3&gt;Stylesheets&lt;/h3&gt;
&lt;p&gt;Stylesheets in Freestyle are structured similarly to CSS stylesheets: They have rules comprised of selectors and properties. However, there are some critical differences between standard CSS stylesheets and the stylesheets used to style Freestyle components: the &lt;a href=&quot;/freestyle/architecture/style#syntax&quot;&gt;selector syntax&lt;/a&gt;, and &lt;a href=&quot;/freestyle/architecture/style#stylesheet-scope&quot;&gt;stylesheet scope&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The reason for this divergence is that standard CSS stylesheets are designed to operate on html elements. By contrast, Freestyle sheets are designed &lt;em&gt;to operate on Freestyle components&lt;/em&gt;, &lt;strong&gt;not&lt;/strong&gt; the html elements that comprise their views.&lt;/p&gt;

&lt;a name=&quot;syntax&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Basic Syntax&lt;/h4&gt;
&lt;p&gt;Selectors in Freestyle sheets identify &lt;em&gt;sets of Freestyle components&lt;/em&gt;. Consider the following rule:&lt;/p&gt;

&lt;code type=&quot;css&quot;&gt;
.textfield {
      border: 1px solid black;
}
&lt;/code&gt;

&lt;p&gt;It will select components with the &quot;textfield&quot; style(by default all TextField components), and will set their views's &lt;strong&gt;border&lt;/strong&gt; style to &quot;1px solid black&quot;.&lt;/p&gt;

&lt;p&gt;Style selectors &lt;em&gt;are conjunctive&lt;/em&gt;, so the rule:&lt;/p&gt;
&lt;code type=&quot;css&quot;&gt;
.textfield .focused {
      border-width: 2px;
}
&lt;/code&gt;
&lt;p&gt;will only apply to components with both the &quot;textfield&quot; style &lt;em&gt;and&lt;/em&gt; the the &quot;focused&quot; style.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;Pro Tip&lt;/strong&gt;: The first step in understanding selectors in Freestyle is to &lt;em&gt;forget everything you know about css selectors&lt;/em&gt;. The Freestyle selector syntax is reminiscent of standard CSS, but has &lt;em&gt;very different semantics&lt;/em&gt;. It is incorrect to assume that your understanding of standard CSS selectors will transfer to their Freestyle equivalents.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;stylesheet-scope&quot;&gt;&lt;/a&gt;
&lt;h4&gt;Scope&lt;/h4&gt;
&lt;p&gt;In standard html, stylesheets are evaluated in the context of the entire document such that &lt;em&gt;every element in the DOM&lt;/em&gt; is a candidate for selection. Freestyle however, leverages the component hierarchy to manage the complexity of styling by associating each stylesheet &lt;em&gt;with a specific component&lt;/em&gt;, called its &lt;em&gt;owner&lt;/em&gt;. A stylesheet's rules are only applicable to &lt;em&gt;its owner and its owner's descendants&lt;/em&gt;. This allows for the convenient embedding of components within other components &lt;em&gt;without affecting the style of other components elsewhere in the hierarchy.&lt;/em&gt;&lt;/p&gt;</body>
        <teaser></teaser>
        <timestamp>1153014390</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>53</nid>
        <vid>59</vid>
        <uid>4</uid>
        <title>Taming the Rhino: Making Mozilla's Javascript Command Line a Little Less Brutish.</title>
        <body>&lt;p&gt;I recently &lt;a href=&quot;http://www.thefrontside.net/blog/learning_javascript_from_the_command_line&quot;&gt;described&lt;/a&gt; how to use the one of the &lt;a href=&quot;http://www.mozilla.org/js/&quot;&gt;freely available shells&lt;/a&gt; as a great way to explore your javascript runtime. There are two implementations of the javascript interpreter sponsored by the Mozilla project, &lt;a href=&quot;http://www.mozilla.org/js/spidermonkey&quot;&gt;Spider Monkey&lt;/a&gt; an interpreter implemented in C, and &lt;a href=&quot;http://www.mozilla.org/rhino/&quot;&gt;Rhino&lt;/a&gt;, an interpreter implemented in Java. With respect to the javascript runtime itself, these two implementations are almost identical, and so what works in one, will generally work in the other. They diverge, however, when it comes to embedding objects and functions that are implemented in a language other than javascript. Naturally, Spidermonkey is better suited for embedding objects implemented in C, while Rhino excels at embedding objects implemented in Java.&lt;/p&gt;

&lt;p&gt;What exactly is &quot;embedding&quot; an object implemented in Java? If you don't know what this means already, I could try to describe it to you, but why not show it live and in the flesh with the Rhino command line? That's the exploratory technique that I find so valuable.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main 
Rhino 1.5 release 5 2004 03 25
js&gt; var javaString = new java.lang.String(&quot;Hello World&quot;)
js&gt; javaString.hashCode()
-862545276
js&gt; javaString.startsWith(&quot;Hello&quot;)
true
js&gt; javaString.startsWith(&quot;World&quot;)
false
js&gt; var jsString = new String(&quot;Hello World&quot;)
js&gt; jsString.startsWith(&quot;Hello&quot;)
js: &quot;&lt;stdin&gt;&quot;, line 5: uncaught JavaScript exception: TypeError: startsWith is not a function. (&lt;stdin&gt;; line 5)
js&gt;                    
&lt;/code&gt;

&lt;p&gt;As you can see, &lt;code type=&quot;javascript&quot;&gt;javaString&lt;/code&gt; is a reference to an actual &lt;code type=&quot;java&quot;&gt;java.lang.String&lt;/code&gt; object, and has access to all the methods of that class, many of which are not contained in the native javascript &lt;code type=&quot;javascript&quot;&gt;String&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Embedding goes two ways. Not only can you instantiate and use java objects from javascript, but you can also pass in javascript objects as parameters to java methods. You can even extend objects and implement interfaces in javascript! Once again, the command line shows this in action. In this example, we'll implement the &lt;code type=&quot;java&quot;&gt;java.lang.Runnable&lt;/code&gt; interface in javascript&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main 
Rhino 1.5 release 5 2004 03 25
js&gt; var impl = new Object()
js&gt; impl.run = function() {print(&quot;Yeah that's right, you better run!&quot;)}

function () {
    print(&quot;Yeah that's right, you better run!&quot;);
}

js&gt; var runnable = new java.lang.Runnable(impl)
js&gt; var thread = new java.lang.Thread(runnable)
js&gt; thread.run()
Yeah that's right, you better run!
js&gt;                                          
&lt;/code&gt;

&lt;p&gt;This is all well and good, but that's quite a bit of code to get right the first time! Chances are, if you're just starting out with the Rhino command line, you're not going to have as much luck, especially if you're using it as a tool to learn javascript in the first place, and unfortunately, this is where Rhino comes up &lt;em&gt;way&lt;/em&gt; short. Rather than have a forgiving &lt;a href=&quot;http://en.wikipedia.org/wiki/Command_line_interface&quot;&gt;CLI&lt;/a&gt;, Rhino punishes you for every syntactic and semantic error that you make by not collecting command history. Even worse, hitting the up and down arrows result in bizarre character literals output directly to the prompt. You can't even correct a mistake that you've made in the current line you're typing without backspacing all the way to the error, and then re-typing from that point on.&lt;/p&gt;

&lt;p&gt;In this example, I'd like to arrow-left so that I can correct my misspelling of &quot;java.lang&quot;&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main 
Rhino 1.5 release 5 2004 03 25
js&gt; var r = new java.lng.Runnable(^[[D^[[D^[[D^[[D
&lt;/code&gt;

&lt;p&gt;&lt;strong&gt;Ugh!&lt;/strong&gt; Or what happens if the shell didn't take my last command because it was slightly bogus? I'd like to retrieve the command with the up-arrow, edit it a little bit in-place and then try again because after all, it was only &lt;em&gt;slightly&lt;/em&gt; bogus. Watch me try and recover from this minor syntax error...&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ java -classpath /usr/share/java/js.jar org.mozilla.javascript.tools.shell.Main
Rhino 1.5 release 5 2004 03 25
js&gt; var f = function() {print(&quot;oops I forgot to close these parens&quot;}
js: &quot;&lt;stdin&gt;&quot;, line 29: missing ) after argument list
js: var f = function() {print(&quot;oops I forgot to close these parens&quot;}
js: ...............................................................^
js: &quot;&lt;stdin&gt;&quot;, line 29: missing } after function body
js: var f = function() {print(&quot;oops I forgot to close these parens&quot;}
js: ...............................................................^
js: &quot;&lt;stdin&gt;&quot;, line 29: Compilation produced 2 syntax errors.
js&gt;
js&gt; //I know. Up-arrow to the rescue!
js&gt; ^[[A^[[A^[[A^[[A^[[A^[[A //drat, foiled again! 
&lt;/code&gt;

&lt;p&gt;These problems are in particularly nasty contraposition to the technique of exploration via the shell which I advocate because the the cost for failure is so expensive. Indeed, what is so wonderful about most modern shells is that the cost for a syntax error is so small. For some reason, the implementors of the Rhino CLI decided to implement their shell with the typical functionality circa 1962.&lt;/p&gt;

&lt;p&gt;It's not a problem for me though, thanks to one of my favorite unsung java libraries, &lt;a href=&quot;http://jline.sourceforge.net/&quot;&gt;JLine&lt;/a&gt;. JLine hits a super sweet spot in that it takes somewhere around 0 effort to add loads of standard functionality to your command line interfaces. It seems that no one in the java world bothers with a decent CLI; tragic in my opinion, but probably because it's considered well-understood, non-trivial and therefore tedious. With JLine, building that CLI comes at around 0 cost. What's really cool about JLine is that a program doesn't even need to be written with it. It can transparently intercept the console input for &lt;em&gt;any&lt;/em&gt; java program and seamlessly splice on any and all functionality you'd expect from a hot shell: in-place editing, command history, you name it. In a word: &lt;em&gt;perfect&lt;/em&gt; for a beast like Rhino.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ java -classpath js.jar:jline.jar  jline.ConsoleRunner org.mozilla.javascript.tools.shell.Main
Rhino 1.5 release 5 2004 03 25
js&gt; prnt(&quot;oops let me try that again&quot;)
js: &quot;&lt;stdin&gt;&quot;, line 1: uncaught JavaScript exception: ReferenceError: &quot;prnt&quot; is not defined. (&lt;stdin&gt;; line 1)
js&gt; print(&quot;oops let me try that again&quot;)
oops let me try that again
js&gt; //trust me, that was easy. Just like it should have been in the first place.
js&gt;       
&lt;/code&gt;

&lt;p&gt;JLine truly is a healing salve for your chafing CLI woes. Did I mention that it's cross-platform?&lt;/p&gt;

&lt;p&gt;While the barrier to entry is extremely low, the path to upgrade is but a mild upward slope. If you do end up wanting nice extras such as TAB-completion or custom key bindings, it has a simple configuration mechanism, and &lt;a href=&quot;http://jline.sourceforge.net/apidocs/index.html&quot;&gt;Java API&lt;/a&gt; to make the pain of writing custom code as minimal as possible. But that's another bedtime story altogether.&lt;/p&gt;

&lt;p&gt;I hope you enjoy JLine with Rhino, or with any other impolite java command lines you may use!&lt;/p&gt;</body>
        <teaser>I recently described how to use the one of the freely available shells as a great way to explore your javascript runtime. There are two implementations of the javascript interpreter sponsored by the Mozilla project, Spider Monkey an interpreter implemented in C, and Rhino, an interpreter implemented in Java. With respect to the javascript runtime itself, these two implementations are almost identical, and so what works in one, will generally work in the other. They diverge, however, when it comes to embedding objects and functions that are implemented in a language other than javascript. Naturally, Spidermonkey is better suited for embedding objects implemented in C, while Rhino excels at embedding objects implemented in Java.</teaser>
        <timestamp>1154708363</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>19</nid>
        <vid>19</vid>
        <uid>2</uid>
        <title>Components</title>
        <body>&lt;p&gt;
Freestyle components are &lt;em&gt;objects that have a graphical representation, and can use that representation to interact with the user&lt;/em&gt;. Examples of components are buttons, checkboxes, and icons.
&lt;/p&gt;

&lt;!--break--&gt;

&lt;div class=&quot;diagram right&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/component-hierarchy.png&quot; alt=&quot;Component Hierarchy&quot; /&gt;&lt;br /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure1&quot; id=&quot;figure1&quot;&gt;Fig. 1 - Component Hierarchy&lt;/a&gt;
&lt;/div&gt;

&lt;a name='structure'&gt;&lt;/a&gt;
&lt;h3&gt;Structure&lt;/h3&gt;
&lt;p&gt;
Internally, components are discreet bundles of visual information packaged with logic to define how that visual information reacts to user input. The logic is specified with java code, or some other programming language, while the visual information, or &lt;em&gt;view&lt;/em&gt;, is specified with HTML/CSS.&lt;/p&gt;

&lt;p&gt;All of the following are valid views:&lt;/p&gt;

&lt;code type=&quot;html&quot;&gt;
&lt;div&gt;This is a view.&lt;/div&gt;
&lt;/code&gt;
&lt;code type=&quot;html&quot;&gt;
&lt;ul&gt;May I introduce 
   &lt;li&gt;Thing one&lt;/li&gt;
   &lt;li&gt;Thing two&lt;/li&gt;
&lt;/ul&gt;
&lt;/code&gt;

&lt;code type=&quot;html&quot;&gt;
&lt;span style=&quot;border: 2px solid black;&quot;&gt;Hello&lt;/span&gt;
&lt;/code&gt;
Every Freestyle component has a view. The default view looks like this:
&lt;code type=&quot;html&quot;&gt;
&lt;div/&gt;
&lt;/code&gt;

&lt;p&gt;
For an advanced treatment of styling and laying out components with &lt;code&gt;CSS&lt;/code&gt;, see the section on &lt;a href='freestyle/architecture/style'&gt;Style&lt;/a&gt;.
&lt;/p&gt;

&lt;blockquote style=&quot;margin-bottom: 1em;&quot;&gt;&lt;p&gt;
&lt;strong&gt;Note:&lt;/strong&gt; Freestyle specifically does &lt;strong&gt;not&lt;/strong&gt; use any code-based solutions such as &quot;layout managers&quot; to arrange and render components. HTML and CSS are flexible, standard and familiar technologies which are particularly suited to this task.
&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name='composition'&gt;&lt;/a&gt;
&lt;h3&gt;Composition&lt;/h3&gt;

&lt;p&gt;A core feature of components is that they may be composed of other components. That is to say: &lt;em&gt; their appearance and behavior may include the appearance and behavior of other components&lt;/em&gt;. For example, a combo-box is composed from a text-field, a button, and a list. While a form for collecting credit-card information might be composed from combo-boxes, text-fields, and check-boxes.&lt;/p&gt;

&lt;p&gt;The sub-components which form a component are called that component's &lt;em&gt;children&lt;/em&gt;. Stated another way, a component is said to &lt;em&gt;contain&lt;/em&gt; its children. Naturally, the component which contains a child is called that childs &lt;em&gt;parent&lt;/em&gt;. The entire tree of components in an application, starting with the top-most component and including all of its children, and its children's children, etc... is called the &lt;em&gt;component hierarchy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Component hierarchies are assembled by adding and removing children from other components just as you might manage any hiearchical structure such as a &lt;a href=&quot;http://www.w3.org/DOM/&quot;&gt;DOM&lt;/a&gt;. This is accomplished with calls to the &lt;code&gt;addChild()&lt;/code&gt; and &lt;code&gt;removeChild()&lt;/code&gt; methods..&lt;/p&gt;

&lt;p&gt;The manner in which components are arranged into a hiearchy is used not only to control &lt;a href=&quot;/freestyle/architecture/events&quot;&gt; how events are handled&lt;/a&gt;, but also how the component appears when it is rendered&lt;/p&gt;

&lt;div class=&quot;diagram right&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/view-composition.png&quot; alt=&quot;View Composition&quot; /&gt;&lt;br /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure2&quot; id=&quot;figure2&quot;&gt;Fig. 2 - View Composition&lt;/a&gt;
&lt;/div&gt;

&lt;h4&gt;View Composition&lt;/h4&gt;
&lt;p&gt;When one component contains other components, &lt;em&gt;its view will also contain the views of all its children&lt;/em&gt;. That is to say, the &lt;em&gt;html&lt;/em&gt; of the child's view is incorporated into the &lt;em&gt;html&lt;/em&gt; of its parent. By default, the html is composed in the order the children were added to the parent component. For example, suppose you have a component and two children whose views look like the following:&lt;/p&gt;

&lt;code type=&quot;html&quot;&gt;
&lt;!--container view --&gt;
&lt;div&gt;
  &lt;span class=&quot;title&quot;&gt;Component One&lt;span&gt;
&lt;/div&gt;
&lt;!--child 1 view --&gt;
&lt;span&gt;Hello&lt;/span&gt;
&lt;!-- child 2 view --&gt;
&lt;table&gt;&lt;tr&gt;&lt;td&gt;Prokaryote&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/code&gt;

&lt;p&gt;adding &lt;strong&gt;child 1&lt;/strong&gt; and &lt;strong&gt;child 2&lt;/strong&gt; to &lt;strong&gt;container&lt;/strong&gt; in that order, will result in the following &lt;em&gt;composed view&lt;/em&gt; for &lt;strong&gt;container&lt;/strong&gt;&lt;/p&gt;

&lt;code type=&quot;html&quot;&gt;
&lt;div&gt;
  &lt;span&gt;Component One&lt;/span&gt;
  &lt;ul/&gt;    &lt;!-- included from child 1 --&gt;
  &lt;table&gt;&lt;tr&gt;&lt;td&gt;Prokaryote&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; &lt;!-- included from child2 --&gt;
&lt;/div&gt;
&lt;/code&gt;

&lt;h4&gt;Child Slots&lt;/h4&gt;
&lt;p&gt;What happens if we do not want the child component's html to be included at the end of its parent's but somewhere else entirely? For these cases, a component can specify where in its view it wishes a particular child's view to be included. It does this by using &lt;em&gt;roles&lt;/em&gt; for its children. Consider the following, more complex component view:&lt;/p&gt;

&lt;code type=&quot;html&quot;&gt;
&lt;!-- a panel view --&gt;
&lt;table&gt;
 &lt;tr&gt;&lt;td&gt;${instructions}&lt;/td&gt;&lt;td&gt;${detonator}&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;/code&gt;

&lt;p&gt;The above view has two slots named &quot;instructions&quot; and &quot;detonator.&quot; These slots will be filled by component's views which are added with a role of the same name. For example:&lt;/p&gt;

&lt;code type=&quot;java&quot;&gt;
panel.addChild(&quot;instructions&quot;, new Label(&quot;Click Here --&gt;&quot;));
panel.addChild(&quot;detonator&quot;, new Button(&quot;Self Destruct&quot;));
&lt;/code&gt;

&lt;a name='roles'&gt;&lt;/a&gt;
&lt;h3&gt;Roles&lt;/h3&gt;
&lt;p&gt;When a component is contained by another component, it will always have a role associated with it. A role is nothing more than &lt;em&gt;a single string of meta-data indicating which part a child plays in the functioning of its parent&lt;/em&gt;. If a role is not stated explicitly, it will always have the implicit role &lt;strong&gt;anonymous&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have already seen roles in action when composing views; a child's role is used to find out where to include that child's view in its parent's view. Role's are also used by selectors when &lt;a href=&quot;/freestyle/architecture/style&quot;&gt;styling&lt;/a&gt; components.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;Pro Tip&lt;/strong&gt;: There is no limit to the number of components that can be added with a given role, and no limit to the number of views that can be included in a given slot.
&lt;/p&gt;&lt;/blockquote&gt;
</body>
        <teaser>&lt;p&gt;
Freestyle components are &lt;em&gt;objects that have a graphical representation, and can use that representation to interact with the user&lt;/em&gt;. Examples of components are buttons, checkboxes, and icons.
&lt;/p&gt;

</teaser>
        <timestamp>1153014290</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>45</nid>
        <vid>51</vid>
        <uid>2</uid>
        <title>Page Not Found</title>
        <body>We don't seem to have a record of the page you're looking for. It may have been moved or deleted, or we may have a broken link. If you've got the time and you're feeling helpful, please let us know what you were looking for and the page that linked to it on the &lt;a href=&quot;contact&quot; title=&quot;Contact Form&quot;&gt;contact page.&lt;/a&gt;</body>
        <teaser></teaser>
        <timestamp>1152573010</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>17</nid>
        <vid>17</vid>
        <uid>2</uid>
        <title>Event Dispatch</title>
        <body>&lt;p&gt;In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. We call this process &lt;em&gt;registering event handlers&lt;/em&gt;. To react to a specific event, you notify a component that you want to run a bit of code every time Freestyle detects that an event of a certain type event has occurred. This bit of code is called the &lt;em&gt;event handler&lt;/em&gt;.&lt;/p&gt;

&lt;a name=&quot;onevent&quot;&gt;&lt;/a&gt;
&lt;h3&gt;On Event&lt;/h3&gt;

&lt;p&gt;The simplest way to register an &lt;em&gt;event handler&lt;/em&gt; in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code&gt;onEvent()&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt;. With it, you can be notified whenever &lt;em&gt;that component&lt;/em&gt; receives an event of a specific type. Example:&lt;/p&gt;

&lt;code type=&quot;java&quot;&gt;Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      Component target = event.getTarget();
      int x = event.getX();
      int y = event.getY();
      System.out.println(target+&quot; was clicked at &quot; + x + &quot;, &quot; + y);
   }
});
&lt;/code&gt;

&lt;p&gt;The &lt;code&gt;handle()&lt;/code&gt; method of MouseEventHandler is invoked every time the &quot;Ok&quot; button receives a &quot;click&quot; event. It is important to note that when using the &lt;code&gt;onEvent()&lt;/code&gt; method of a component, the event handler is only invoked for events which have &lt;em&gt;that component&lt;/em&gt; as their target.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;Pro Tip&lt;/strong&gt;: There is no limit to the number of event event handlers that can be registered to receive events with &lt;code&gt;onEvent()&lt;/code&gt; or any other event registration method. All of them will be invoked when the event occurs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sometimes however, the need arises to register event handlers in a more flexible way than with just a specific target as you do with &lt;code&gt;onEvent()&lt;/code&gt;.&lt;/p&gt;

&lt;a name=&quot;catchevent&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Catch Event&lt;/h3&gt;
&lt;p&gt;Suppose you have a component with many fields for text entry. To make it more usable, you would like to add a keyboard shortcut to reset all of the fields whenever the user presses &quot;CTRL+R&quot;. To do so, you must first implement the &lt;a href=&quot;http://www.thefrontside.net/docs/java/net/thefrontside/freestyle/event/KeyEventHandler.html&quot;&gt;&lt;code&gt;KeyEventHandler&lt;/code&gt;&lt;/a&gt; interface:&lt;/p&gt;

&lt;code type=&quot;java&quot;&gt;public class MyFormReset implements KeyEventHandler {
   private MyForm form;
   public MyFormReset(MyForm form) {
      this.form = form;
   }
   public void handle(KeyEvent event) {
      if (event.hasCtrlKey() &amp;amp;&amp;amp; event.isChar('r')) {
         this.form.reset();
      }
   }
}&lt;/code&gt;

&lt;p&gt;This defines the event handler, but where do you &lt;em&gt;register&lt;/em&gt; it?. You could use &lt;code&gt;onEvent()&lt;/code&gt; inside the constructor of the &lt;code&gt;MyForm&lt;/code&gt; class, but you would have to call it once for every single field of text contained in your form. Matters would be complicated still if you were to dynamically add fields to your form at runtime: you would need to remember to register your event handler with each new field as it was added!&lt;/p&gt;

&lt;p&gt;Rather than manage that complexity, &lt;b&gt;Freestyle&lt;/b&gt; provides another, more flexible way of registering event handlers: &lt;code&gt;catchEvent()&lt;/code&gt;. Registering a handler for an event type on a component with &lt;code&gt;catchEvent()&lt;/code&gt; will invoke that event handler whenever that component &lt;em&gt;or any of its descendants&lt;/em&gt; receive that event. In the case of our form:&lt;/p&gt;

&lt;code type=&quot;java&quot;&gt;public class MyForm extends Component {
   public MyForm() {
      this.catchEvent(&quot;keydown&quot;, new MyFormReset(this));
   }
   //class definition...
}&lt;/code&gt;

&lt;p&gt;The MyFormReset event handler will be invoked whenever &lt;em&gt;any component contained inside the form&lt;/em&gt; receives a &quot;keydown&quot; event, which is exactly the behavior required by this example.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;Caution:&lt;/strong&gt; Unlike &lt;code&gt;onEvent()&lt;/code&gt;, event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt; can be invoked for events with many different targets, so it is not safe to assume anything about which object the event target is (except that it is the invocant of &lt;code&gt;catchEvent()&lt;/code&gt; or &lt;em&gt;one of its descendants.&lt;/em&gt;)
&lt;/p&gt;&lt;/blockquote&gt;

&lt;a name=&quot;order&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Event Order&lt;/h3&gt;

&lt;p&gt;With &lt;code&gt;catchEvent()&lt;/code&gt;, both a component &lt;em&gt;and its ancestors&lt;/em&gt; can listen for events that are received by that component. But what happens if &lt;em&gt;both&lt;/em&gt; that component &lt;em&gt;and&lt;/em&gt; one or more of its ancestors have registered event handlers for the same event?&lt;/p&gt;

&lt;p&gt;To illustrate the problem, suppose we have three elements (&lt;em&gt;Fig. 1&lt;/em&gt;), all of which have registered &quot;click&quot; event handlers with &lt;code&gt;catchEvent()&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;diagram left&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/event-hierarchy.png&quot; alt=&quot;Component Structure&quot; /&gt;&lt;br /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure1&quot; id=&quot;figure1&quot;&gt;Fig. 1 - Component Structure&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&quot;diagram right&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/event-catch.png&quot; alt=&quot;Catch Flow&quot; /&gt;&lt;br /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure2&quot; id=&quot;figure2&quot;&gt;Fig. 2 - Event Flow : Catch Phase&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Whenever &lt;strong&gt;&lt;code&gt;target&lt;/code&gt;&lt;/strong&gt; receives a &quot;click&quot; event, all three components will have their event handler's invoked. But in what order? For event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt;, the dispatch begins at the target and proceeds up the &lt;a href=&quot;http://thefrontside.net/freestyle/architecture/components&quot;&gt;component hierarchy&lt;/a&gt;. So in this case, the &quot;click&quot; event handler for &lt;strong&gt;&lt;code&gt;target&lt;/code&gt;&lt;/strong&gt; will be invoked first, followed by &lt;strong&gt;&lt;code&gt;container&lt;/code&gt;&lt;/strong&gt;, followed by &lt;strong&gt;&lt;code&gt;parent&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;diagram right&quot; style=&quot;clear: right;&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/event-capture.png&quot; alt=&quot;Capture Flow&quot; /&gt;&lt;br /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure3&quot; id=&quot;figure3&quot;&gt;Fig. 3 - Event Flow : Capture Phase&lt;/a&gt;
&lt;/div&gt;

&lt;a name=&quot;captureevent&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Capture Event&lt;/h3&gt;
&lt;p&gt;To round out control over events, there is one final event registration method: &lt;code&gt;captureEvent()&lt;/code&gt;. Event handlers registered with captureEvent() are invoked before all other event handlers, and proceed in the &lt;em&gt;opposite order&lt;/em&gt; to those registered with &lt;code&gt;catchEvent()&lt;/code&gt;, or &lt;em&gt;down the component hierarchy&lt;/em&gt;, starting with the top-level component, and ending with the component target. This allows components further up in the hiearchy to intercept events &lt;em&gt;before they reach their descendants&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;One reason to capture events might be to &quot;disable&quot; all the descendants of a component so that they become unresponsive to mouse input:&lt;/p&gt;
&lt;code type=&quot;java&quot;&gt;
MouseEventHandler disable = new MouseEventHandler() {
   public void handle(MouseEvent event) {event.consume()}
};
parent.captureEvent(&quot;mousedown&quot;, disable);
parent.captureEvent(&quot;mouseup&quot;, disable);
parent.captureEvent(&quot;click&quot;, disable);
&lt;/code&gt;
&lt;p&gt;
In this example, &lt;code&gt;disable.handle()&lt;/code&gt; is invoked for every mouse event before that event is received by any of &lt;code&gt;parent&lt;/code&gt;'s descendants, &lt;em&gt;including the event target itself&lt;/em&gt;. Thus, by &lt;a href=&quot;/freestyle/architecture/events#consume&quot;&gt;consuming&lt;/a&gt; the event before any of its descendants handlers have a chance to react to the event, &lt;code&gt;parent&lt;/code&gt; effectively &quot;disables&quot; its descendants.&lt;/p&gt;

&lt;p&gt;The full story, explained in the following section, is that each of the event registration methods: &lt;code&gt;onEvent()&lt;/code&gt;, &lt;code&gt;catchEvent()&lt;/code&gt;, and &lt;code&gt;captureEvent()&lt;/code&gt; registers an event handler to be fired during a distinct &lt;em&gt;dispatch phase&lt;/em&gt; corresponding to its method name.&lt;/p&gt;

&lt;a name=&quot;phases&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Phases of Dispatch&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;Freestyle&lt;/b&gt; event dispatch is divided into three distinct phases: &lt;em&gt;capture&lt;/em&gt;, &lt;em&gt;on&lt;/em&gt;, and &lt;em&gt;catch&lt;/em&gt;, which proceed in that order.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Capture: &lt;em&gt;registered with &lt;code&gt;captureEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li style=&quot;list-style: none&quot;&gt;This is the first phase of event dispatch. All &quot;capture&quot; handlers for an event are invoked before entering the next phase. The invocation of event handlers proceeds &lt;em&gt;down the component hierarchy&lt;/em&gt;, beginning with the top-most component, and ending with the event target&lt;/li&gt;
  &lt;li&gt;On: &lt;em&gt;registered with &lt;code&gt;onEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li style=&quot;list-style: none&quot;&gt;All &quot;on&quot; handlers are invoked after all &quot;capture&quot; handlers, but before any &quot;catch&quot; handlers. This only invokes handlers registered &lt;em&gt;on the target of the event being dispatched&lt;/em&gt;. It specifically does &lt;strong&gt;not&lt;/strong&gt; invoke any event handlers on any of target's ancestors.&lt;/li&gt;
  &lt;li&gt;Catch: &lt;em&gt;registered with &lt;code&gt;catchEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
  &lt;li style=&quot;list-style: none&quot;&gt;The last phase of dispatch, &quot;catch&quot; handlers are dispatched after all other phases have finished. The invocation of catch handlers proceeds &lt;em&gt;up the component hierarchy&lt;/em&gt; beginning with the event target, and ending with the top-most component.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;diagram left&quot;&gt;
  &lt;img class=&quot;diagram-img&quot; src=&quot;/images/event-flow.png&quot; alt=&quot;Event Flow&quot; /&gt;
  &lt;a class=&quot;diagram-label&quot; name=&quot;figure4&quot; id=&quot;figure4&quot;&gt;Fig. 4 - Event Flow&lt;/a&gt;
&lt;/div&gt;
&lt;a name=&quot;consume&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Consuming Events&lt;/h3&gt;
&lt;p&gt;
Any event handler can interrupt the normal flow of event dispatch, so that no subsequent event handler sees the event. There are many reasons you as a programmer might want to do this: from disabling a component, to improving performance (yes, the less code that gets run, the less time the dispatch cycle takes) It does this by calling the &lt;code&gt;consume()&lt;/code&gt; method of the event being dispatched. Regardless of the dispatch phase the handler that consumes an event, &lt;em&gt;is the last event handler to be invoked for that event&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
For example, a handler that consumes in an event in the capture phase, will prevent the entire &quot;on&quot; and &quot;catch&quot; phase from &lt;em&gt;ever happening&lt;/em&gt;. 
&lt;/p&gt;
&lt;a name=&quot;releasehandler&quot;&gt;&lt;/a&gt;
&lt;h3&gt;Releasing Event Handlers&lt;/h3&gt;
&lt;p&gt;Thus far, we have seen how to register event handlers, but what happens when you want to &quot;unregister&quot; a handler so that it is &lt;em&gt;no longer invoked&lt;/em&gt; when its trigger event type is received?&lt;/p&gt;
&lt;p&gt;Continuing with our previous example of &quot;disabling&quot; a component's children, to &quot;re-enable&quot; them at some later point, we will have to some how &quot;undo&quot; the quashing of all mouse events so that the disabled components can once again begin reacting to input from the mouse. This can be accomplished by releasing the consuming handler's &lt;em&gt;callback binding&lt;/em&gt;&lt;/p&gt;
&lt;code type=&quot;java&quot;&gt;
public interface CallbackBinding {
   void release();
}
/** Event Registration methods in Component */
public CallbackBinding captureEvent(String eventType, Handler handler);
public CallbackBinding onEvent(String eventType, Handler handler);
public CallbackBinding catchEvent(String eventType, Handler handler);
&lt;/code&gt;
&lt;p&gt;Each of the event registration methods returns an instance of &lt;code&gt;CallbackBinding&lt;/code&gt; which associates that event handler to the component, event type, and dispatch phase of the registration. It is this object which you can use to permanently unbind that event handler from that same component, event type and dispatch phase for which it was registered, such that it will no longer be invoked under those conditions. &lt;em&gt;This will not prevent it from continuing to be invoked as a result of other registrations&lt;/em&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;
&lt;strong&gt;Pro Tip:&lt;/strong&gt; An event handler will not be garbage collected until its is no longer bound to any events(an event handler is considered implicity unbound if the component to which it was registered has been garbage collected), thus, any objects it references will be held until the event handler is completely unbound. Prevent memory leaks by &lt;em&gt;always unbinding unnecessary, or obsolete event handlers&lt;/em&gt;
&lt;/p&gt;&lt;/blockquote&gt;</body>
        <teaser>&lt;p&gt;In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;&lt;/p&gt;

</teaser>
        <timestamp>1153013891</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>20</nid>
        <vid>20</vid>
        <uid>2</uid>
        <title>FreeStyle Demos</title>
        <body>&lt;p&gt;The first Freestyle demos are now available! This demonstration includes a WebSearch component using Yahoo's search API and the Sibilance application which gives a basic demonstration of some of our UI components. You can now send write us to let us know what you think with our feedback demo. &lt;strong&gt;Click below to see it in action!&lt;/strong&gt;&lt;/p&gt;

&lt;a style=&quot;display:block; width:300px; margin:0 auto;border:1px solid #333;background-color:#F92;color:#000;text-align:center;text-decoration:none;font-weight:bold;font-size:1.3em;&quot; href=&quot;/demos/index.html&quot; title=&quot;Freestyle Demos&quot;&gt;Freestyle Demo&lt;/a&gt;

&lt;p&gt;&lt;em&gt;Note: The demo applications require Javascript and a modern browser. We've tested with Mozilla 1.7+ (which includes Firefox 1.0+) and with Internet Explorer 6, though there are a few outstanding bugs with IE6. It may also work to some degree on other browsers, but they're not officially supported at the moment.&lt;/em&gt;&lt;/p&gt;

&lt;!--break--&gt;</body>
        <teaser>&lt;p&gt;The first Freestyle demos are now available! This demonstration includes a WebSearch component using Yahoo's search API and the Sibilance application which gives a basic demonstration of some of our UI components. You can now send write us to let us know what you think with our feedback demo. &lt;strong&gt;Click below to see it in action!&lt;/strong&gt;&lt;/p&gt;

&lt;a style=&quot;display:block; width:300px; margin:0 auto;border:1px solid #333;background-color:#F92;color:#000;text-align:center;text-decoration:none;font-weight:bold;font-size:1.3em;&quot; href=&quot;/demos/index.html&quot; title=&quot;Freestyle Demos&quot;&gt;Freestyle Demo&lt;/a&gt;

&lt;p&gt;&lt;em&gt;Note: The demo applications require Javascript and a modern browser. We've tested with Mozilla 1.7+ (which includes Firefox 1.0+) and with Internet Explorer 6, though there are a few outstanding bugs with IE6. It may also work to some degree on other browsers, but they're not officially supported at the moment.&lt;/em&gt;&lt;/p&gt;

</teaser>
        <timestamp>1182000550</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>21</nid>
        <vid>21</vid>
        <uid>2</uid>
        <title>Announcements Mailing List</title>
        <body>&lt;?php
  global $tfs_bad_mail;
  function tfs_subscribe() {
    global $tfs_bad_mail;
    $form['#method'] = 'post';
    $form['mail'] = array(
      '#type' =&gt; 'textfield',
      '#title' =&gt; t('E-mail Address'),
      '#default_value' =&gt; $tfs_bad_mail,
      '#size' =&gt; 30,
      '#maxlength' =&gt; 100,
      '#description' =&gt; t('The email address that will receive the announcements.'),
    );
    $form['submit'] = array(
      '#type' =&gt; 'submit',
      '#value' =&gt; t('Subscribe'),
    );
    $output = &quot;&lt;div id='subscribe-form'&gt;\n&quot;;
    $output .= drupal_get_form('tfs_subscribe', $form);
    $output .= &quot;&lt;/div&gt;\n&quot;;
    return $output;
  }

  function tfs_subscribe_validate($form_id, $form_values) {
    global $tfs_bad_mail;

    $mail = $form_values['mail'];
    $error = user_validate_mail($mail);
    if ($error) {
      $tfs_bad_mail = $mail;
      watchdog('list', &quot;Invalid subscription request: $error&quot;, WATCHDOG_WARNING);
      form_set_error('mail', $error);
    }
    return !$error;
  }

  function tfs_subscribe_submit($form_id, $form_values) {
    $mail = $form_values['mail'];

    $to = 'tfs-announcements-request@thefrontside.net';
    $subject = 'Subscription Request';
    $header = '';
    $message = &quot;subscribe tfs-announcements $mail&quot;;
    if (user_mail($to, $subject, $message, $header)) {
      $success_message = &quot;$mail was subscribed to tfs-announcements.&quot;;
      watchdog('list', $success_message);
      drupal_set_message($success_message, 'status');
    } else {
      watchdog('list', &quot;user_mail() failed sending subscription request for $mail&quot;, WATCHDOG_ERROR);
      $message = 'We were unable to send your subscription request as this time. Please try again later or contact the site administrator.';
      form_set_error('', $message);
    }
  }

?&gt;

&lt;p&gt;The Front Side Announcements mailing list is a very low traffic list for notices relating to the Freestyle Webtop Framework. This may include new releases, security announcements or other important information.&lt;/p&gt;

&lt;p&gt;If you'd like to subscribe, just enter your e-mail address in the form below, and click &amp;quot;Subscribe&amp;quot;. You will receive an email in your inbox with some information about the list. You can always unsubscribe by sending an email to &lt;a href=&quot;mailto:majordomo@thefrontside.net&quot; title=&quot;Mailing List Address&quot;&gt;majordomo@thefrontside.net&lt;/a&gt; with &amp;quot;unsubscribe tfs-announcements&amp;quot; as the first line in the message. (Instructions for unsubscribing will also be included at the bottom of every message you receive.)&lt;/p&gt;

&lt;p&gt;Your e-mail address will be used only for receiving announcements from this list. We will never sell, share, or give your address away to anyone else.&lt;/p&gt;

&lt;?php print tfs_subscribe(); ?&gt;
</body>
        <teaser>Subscribe to The Frontside Software announcements mailing list.</teaser>
        <timestamp>1152477565</timestamp>
        <format>2</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>55</nid>
        <vid>61</vid>
        <uid>0</uid>
        <title>getElementsByTagName does not return an Array</title>
        <body>The following code does not work as the &quot;scripts&quot; variable is not an Array:

&lt;code&gt;
  var script = document.createElement(&quot;script&quot;);
  script.src = &quot;ajax.js&quot;;
  document.body.appendChild(script);
&lt;/code&gt;

&lt;code&gt;
  var scripts = document.getElementsByTagName(&quot;script&quot;);
  for (var i = 0; i &lt; scripts.length; i++)
  {
    var script = scripts[i].src;
    var p = script.indexOf(&quot;ajax.js&quot;);
    if (p == script.length - &quot;ajax.js&quot;.length)
      return script.substring(0, p);
  }
  return null;
&lt;/code&gt;

The error on the console:

&lt;code&gt;
Buildfile: E:\Johan\Eclipse Workspace\AjaxFramework\crosscheck.xml
test:
     [java] Running Test Suite in browser: Internet Explorer 6
     [java] net.thefrontside.html.NodeList@a1807c
     [java] TypeError: Cannot read property &quot;src&quot; from undefined (ajax.js#26)
     [java] Java Result: 1
&lt;/code&gt;


I fixed this by returning matches._nodes instead.

&lt;code&gt;
_Element.prototype.getElementsByTagName = function(name, matches) {
  matches = matches || _NodeList.create()
  //...

  // FIX: The expected return is an Array.
  // return matches
  return matches._nodes
}
&lt;/code&gt;

Regards

Johan Segerfeldt
Bindows Team
&lt;a href=&quot;http://www.bindows.net&quot;&gt;http://www.bindows.net&lt;/a&gt;
</body>
        <teaser>The following code does not work as the &quot;scripts&quot; variable is not an Array:

&lt;code&gt;
  var script = document.createElement(&quot;script&quot;);
  script.src = &quot;ajax.js&quot;;
  document.body.appendChild(script);
&lt;/code&gt;

&lt;code&gt;
  var scripts = document.getElementsByTagName(&quot;script&quot;);
  for (var i = 0; i &lt; scripts.length; i++)
  {
    var script = scripts[i].src;
    var p = script.indexOf(&quot;ajax.js&quot;);
    if (p == script.length - &quot;ajax.js&quot;.length)
      return script.substring(0, p);
  }
  return null;
&lt;/code&gt;

The error on the console:

&lt;code&gt;
Buildfile: E:\Johan\Eclipse Workspace\AjaxFramework\crosscheck.xml</teaser>
        <timestamp>1155991149</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>54</nid>
        <vid>60</vid>
        <uid>0</uid>
        <title>Framework tests</title>
        <body>Hi,

I just checked out the tutorial and downloaded Crosscheck. Wow! This looks like a great product! Beautiful initiative! Finally an interesting (maybe even useful :-) ) unit test framework for Javascript!

I have two questions:

&lt;ol&gt;
&lt;li&gt;Can Crosscheck be used to test code written for a framework (or even the framework itself)? I.e. can I make the framework or any other js file load and set up objects before running the tests?&lt;/li&gt;

&lt;li&gt;Can I simulate multiple frames/iframes in a browser and execute code in the different frames separately? Then test how objects in these frames interact?&lt;/li&gt;
&lt;/ol&gt;


Regards
Johan
</body>
        <teaser>Hi,

I just checked out the tutorial and downloaded Crosscheck. Wow! This looks like a great product! Beautiful initiative! Finally an interesting (maybe even useful :-) ) unit test framework for Javascript!

I have two questions:

&lt;ol&gt;
&lt;li&gt;Can Crosscheck be used to test code written for a framework (or even the framework itself)? I.e. can I make the framework or any other js file load and set up objects before running the tests?&lt;/li&gt;

&lt;li&gt;Can I simulate multiple frames/iframes in a browser and execute code in the different frames separately? Then test how objects in these frames interact?&lt;/li&gt;</teaser>
        <timestamp>1155979368</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>62</nid>
        <vid>70</vid>
        <uid>4</uid>
        <title>RYE: Repeat Yourself Enough</title>
        <body>&lt;p&gt;Lately, I've been practicing the exact opposite of the DRY principle. Yup, you read that right:  I repeat myself constantly, and in as many different contexts... including code, database schemas, test-plans and even documentation. The reason: So I won't have to repeat myself. It's not that I don't buy into the DRY principle, or that I'm somehow skeptical about the value its proper application yields. I just find it difficult to achieve in practice.&lt;/p&gt;

&lt;p&gt;According to the &lt;a href=&quot;pragmaticprogrammer.com&quot;&gt;Pragmatic Programmers&lt;/a&gt; who coined the term:&lt;/p&gt;
&lt;blockquote&gt;&lt;em&gt;
DRY says that every piece of system knowledge should have one authoritative, unambiguous representation. Every piece of knowledge in the development of something should have a single representation. A system's knowledge is far broader than just its code. It refers to database schemas, test plans, the build system, even documentation.
&lt;/em&gt;&lt;/blockquote&gt;

&lt;p&gt;Essentially it is an empirical measure against which to gauge the proper level of abstraction in your system. If you have not made the right abstractions, then you will be found to be repeating yourself, whereas if you &lt;em&gt;have&lt;/em&gt; made the right abstractions, then you won't. This is because abstractions &lt;em&gt;directly encode&lt;/em&gt; the system  knowledge that DRY talks about no less than 3 times in its definition.&lt;/p&gt;

&lt;p&gt;The benefits of good abstractions are many and well known, and I'm not going to go into them here (there's always the internet for that), but what I've taken particular heed of lately is that abstraction is a double-edged sword that should not be wielded lightly. Get it right, and the previously intractable dissolves to simplicity in an instant... but get it wrong, and a snarl of complexity gridlocks your code base just as fast.&lt;/p&gt;

&lt;p&gt;You see, I wasn't telling the whole truth when I said before that abstractions directly encode system knowledge. It would be more correct to say: &lt;em&gt;Good&lt;/em&gt; abstractions directly encode system knowledge. &lt;em&gt;Bad&lt;/em&gt; abstractions directly encode &lt;em&gt;system ignorance.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The problem is that the DRY principle, while still very valid and useful, doesn't help us here because  it assumes system knowledge as its input. But really valuable system knowledge isn't just lying around, it must be carefully constructed with significant amounts of research and analysis. That is to say, it must be learned. And what better way is there to learn something than by doing it over and over again until you know it inside and out? What better way is there than trial and error to really &lt;em&gt;get at the physics&lt;/em&gt; of a phenomenon until you can use it to easily analyze it in all its forms? The fact is, you've got to repeat yourself over and over enough times until you can say with confidence: &lt;em&gt;This I know to be true.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can think of it like doing your math homework, or being like Daniel-San: waxing Mr Miyagi's car again and again until you know karate by instinct. In fact, I'm convinced that there's no other way to generate &lt;em&gt;real&lt;/em&gt; knowledge.&lt;/p&gt;

&lt;p&gt;Ironically, I repeat myself a lot these days because I hate repeating myself. I loathe it with an almost pathological passion, and sometimes (more often then I'd like to admit) it plays to my disadvantage. In my obsessive/compulsive rush to not repeat myself I'll introduce a bad abstraction based on flawed or incomplete system knowledge, and worse still, I won't know that I took the wrong fork in the road until it's way late in the game and it's hard to find the way back home.&lt;/p&gt;

&lt;p&gt;That's why I'm playing it cool lately and making sure that I repeat myself enough to &lt;em&gt;perfect&lt;/em&gt; the system knowledge required to keep myself DRY.&lt;/p&gt;</body>
        <teaser>Everybody believes in the DRY principle. Not only is it common sense, but projects like ruby on rails have achieved real success adopting it as a core value. In practice however, applying it with too much zeal can actually be harmful. That's why in my experience, the best way to uphold the DRY principle is to violate it mindfully.</teaser>
        <timestamp>1183157077</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>47</nid>
        <vid>53</vid>
        <uid>4</uid>
        <title>Crosscheck Framework Released</title>
        <body>The Frontside Software is pleased to announce that the first public version of Crosscheck is now &lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=169197&quot;&gt;available for download&lt;/a&gt;.

&lt;p&gt;&lt;a href=&quot;http://www.thefrontside.net/crosscheck&quot;&gt;Crosscheck&lt;/a&gt; is a 100% pure java system for testing that your javascript code will work in multiple browsers, without requiring those browsers to be installed.

This initial version is released under the LGPL. Initial features include:

&lt;ul&gt;
&lt;li&gt;Truly headless, cross platform testing of your javascript code.&lt;/li&gt;
&lt;li&gt;Simple Java API for controlling test execution, and collecting test results&lt;/li&gt;
&lt;li&gt;Fully automatable, headless execution, ideal for continuous integration builds&lt;/li&gt;
&lt;li&gt;Fast test execution for a tight feedback loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

There is a basic Crosscheck tutorial &lt;a href=&quot;http://www.thefrontside.net/crosscheck/crosscheck_tutorial&quot;&gt;online&lt;/a&gt; which is also distributed with the downloadable package. For questions or comments, drop by the crosscheck forums at &lt;a href=&quot;http://www.thefrontside.net/crosscheck/forums&quot;&gt;http://www.thefrontside.net/crosscheck/forums&lt;/a&gt;

&lt;p&gt;Enjoy,&lt;/p&gt;
&lt;p&gt;The Frontside Software Development Team&lt;/p&gt;

</body>
        <teaser>The Crosscheck Browserless Testing Framework version 0.1 is now available for download!</teaser>
        <timestamp>1153144573</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>48</nid>
        <vid>54</vid>
        <uid>0</uid>
        <title>When can we try the toolkit</title>
        <body>When is Freestyle going to be available?</body>
        <teaser>When is Freestyle going to be available?</teaser>
        <timestamp>1153108075</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>49</nid>
        <vid>55</vid>
        <uid>0</uid>
        <title>rich text editors</title>
        <body>
Will you be providing your own rich text editor or will you incorporate existing ones like TinyMCE, FCKEditor, etc.


JB

</body>
        <teaser>
Will you be providing your own rich text editor or will you incorporate existing ones like TinyMCE, FCKEditor, etc.


JB

</teaser>
        <timestamp>1153108218</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>26</nid>
        <vid>26</vid>
        <uid>6</uid>
        <title>Congratulations</title>
        <body>Congrats on launching the site. I'm eager to see what happens ;)</body>
        <teaser>Congrats on launching the site. I'm eager to see what happens ;)</teaser>
        <timestamp>1143737144</timestamp>
        <format>1</format>
    </node_revisions>
    <node_revisions>
        <nid>27</nid>
        <vid>27</vid>
        <uid>7</uid>
        <title>The Coolest!</title>
        <body>You guys are totally going to revolutionize the way people think!  Al Gore has got nuthin on you!

And seriously, where are the emoticons???  You cant have a forum without emoticons :lol</body>
        <teaser>You guys are totally going to revolutionize the way people think!  Al Gore has got nuthin on you!

And seriously, where are the emoticons???  You cant have a forum without emoticons :lol</teaser>
        <timestamp>1147021059</timestamp>
        <format>1</format>
    </node_revisions>
    <node_revisions>
        <nid>28</nid>
        <vid>28</vid>
        <uid>2</uid>
        <title>Freestyle Webtop Toolkit Demonstrations Released</title>
        <body>&lt;strong&gt;Demonstrations of the Freestyle Webtop Toolkit&lt;/strong&gt; are now available in the Freestyle section of the site. To go directly to the demos, &lt;a href='http://thefrontside.net/freestyle/demo'&gt;click here&lt;/a&gt;.
&lt;!--break--&gt;

Freestyle is a Java(TM) development environment that makes it possible to create rich, dynamic web applications without the complexity of traditional methods. To show you what we're all about, we've developed a few simple demonstrations of its capability. It's important to note that these demonstrations were written entirely on the server side, entirely in Java, and &lt;em&gt;without using DHTML or using AJAX!&lt;/em&gt;

We will continue to provide updates to both our platform and these demonstrations on a regular basis, so be sure to check back often.

To find out more about Freestyle and how it might be right for you, or to contact The Frontside Software for any reason, drop us a line at &lt;a href=&quot;mailto:information@thefrontside.net&quot;&gt;information@thefrontside.net&lt;/a&gt; We'd love to hear from you.

Once again, the url for the demo is 

&lt;a href='http://thefrontside.net/freestyle/demo'&gt;http://thefrontside.net/freestyle/demo&lt;/a&gt;

Enjoy!

The Frontside Software Team</body>
        <teaser>Freestyle demos are now available!</teaser>
        <timestamp>1153007385</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>29</nid>
        <vid>29</vid>
        <uid>8</uid>
        <title>Layout</title>
        <body>A very cool project. How do you handle the layout of different items without using the traditional layout managers?</body>
        <teaser>A very cool project. How do you handle the layout of different items without using the traditional layout managers?</teaser>
        <timestamp>1148073174</timestamp>
        <format>1</format>
    </node_revisions>
    <node_revisions>
        <nid>30</nid>
        <vid>30</vid>
        <uid>3</uid>
        <title>How to make a component</title>
        <body>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
	&lt;META HTTP-EQUIV=&quot;CONTENT-TYPE&quot; CONTENT=&quot;text/html; charset=windows-1252&quot;&gt;
	&lt;TITLE&gt;&lt;/TITLE&gt;
	&lt;META NAME=&quot;GENERATOR&quot; CONTENT=&quot;OpenOffice.org 2.0  (Win32)&quot;&gt;
	&lt;META NAME=&quot;CREATED&quot; CONTENT=&quot;20060524;2410270&quot;&gt;
	&lt;META NAME=&quot;CHANGED&quot; CONTENT=&quot;20060524;2411531&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY LANG=&quot;en-US&quot; DIR=&quot;LTR&quot;&gt;
&lt;P&gt;There are 3 steps to make a Freestyle component&lt;/P&gt;
&lt;OL&gt;
	&lt;LI&gt;&lt;P STYLE=&quot;margin-bottom: 0in&quot;&gt;Create a Java class that extends
	&lt;A HREF=&quot;http://www.thefrontside.net/docs/java/net/thefrontside/freestyle/Component.html&quot;&gt;net.thefrontside.freestyle.Component&lt;/A&gt;
		&lt;/P&gt;
	&lt;LI&gt;&lt;P STYLE=&quot;margin-bottom: 0in&quot;&gt;Create a template XML file with the
	same name as the Java class 
	&lt;/P&gt;
	&lt;LI&gt;&lt;P&gt;Create a CSS file with the same name as the Java class 
	&lt;/P&gt;
&lt;/OL&gt;
&lt;P&gt;Example would be&lt;/P&gt;
&lt;P&gt;JavaClass -&amp;gt; NewsPanel.java&lt;BR&gt;View - &amp;gt; NewsPanel.xml&lt;BR&gt;CSS
-&amp;gt; NewsPanel.css&lt;/P&gt;
&lt;P&gt;By default the location of the view template and the css must be
located in the same resource path as the Java class file. If this
model is not suitable, the template and css can be programmatically
configured by either passing them into the component constructor or
creating instance fields stylesheetName and templateName and
specifying the appropriate URL&lt;/P&gt;
&lt;P&gt;
&lt;code type=&quot;java&quot;&gt;
public class NewsPanel extends Component{ 
  private String templateName = &quot;myapp/views/AnyName.xml&quot;
  private String stylesheetName = &quot;/myapp/css/AnyName.css&quot;
  
  public void NewsPanel(){ 
 
  } 
} 
&lt;/code&gt;

Another option would be to pass in the template and css to the Component constructor on your defined class
&lt;code type=&quot;java&quot;&gt;
public class NewsPanel extends Component{ 
   
  public void NewsPanel(){ 
    super(&quot;myapp/views/AnyName.xml&quot;, &quot;/myapp/css/AnyName.css&quot;)
  } 
} 
&lt;/code&gt;



&lt;/P&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</body>
        <teaser>&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot;&gt;
&lt;HTML&gt;
&lt;HEAD&gt;
	&lt;META HTTP-EQUIV=&quot;CONTENT-TYPE&quot; CONTENT=&quot;text/html; charset=windows-1252&quot;&gt;
	&lt;TITLE&gt;&lt;/TITLE&gt;
	&lt;META NAME=&quot;GENERATOR&quot; CONTENT=&quot;OpenOffice.org 2.0  (Win32)&quot;&gt;
	&lt;META NAME=&quot;CREATED&quot; CONTENT=&quot;20060524;2410270&quot;&gt;
	&lt;META NAME=&quot;CHANGED&quot; CONTENT=&quot;20060524;2411531&quot;&gt;
&lt;/HEAD&gt;
&lt;BODY LANG=&quot;en-US&quot; DIR=&quot;LTR&quot;&gt;
&lt;P&gt;There are 3 steps to make a Freestyle component&lt;/P&gt;
&lt;OL&gt;
	&lt;LI&gt;&lt;P STYLE=&quot;margin-bottom: 0in&quot;&gt;Create a Java class that extends
	&lt;A HREF=&quot;http://www.thefrontside.net/docs/java/net/thefrontside/freestyle/Component.html&quot;&gt;net.thefrontside.freestyle.Component&lt;/A&gt;</teaser>
        <timestamp>1148453843</timestamp>
        <format>3</format>
    </node_revisions>
    <node_revisions>
        <nid>31</nid>
        <vid>31</vid>
        <uid>2</uid>
        <title>Demonstration Applications Updated</title>
        <body>&lt;strong&gt;We're pleased to announce&lt;/strong&gt; the release of a new version of our Freestyle Webtop Framework demo applications! This marks another another step in our ongoing commitment to show product enhancements to the public as they become available.

&lt;!--break--&gt;

To go directly to the demos, go &lt;a href=&quot;http://www.thefrontside.net/freestyle/demo&quot;&gt;here&lt;/a&gt;.

As always, these demonstrations were written entirely with Freestyle, entirely on the server side, entirely in Java(TM), and &lt;em&gt;without&lt;/em&gt; using DHTML or AJAX!

This update includes:
&lt;ul&gt;
 &lt;li&gt;A new demonstration component for leaving live feedback&lt;/li&gt;
 &lt;li&gt;Transitional effects (visible when opening and closing applications)&lt;/li&gt;
 &lt;li&gt;Improved styling of the demo applications&lt;/li&gt;
 &lt;li&gt;Performance enhancements on application startup&lt;/li&gt;
 &lt;li&gt;The usual round of tweaks and enhancements&lt;/li&gt;
&lt;/ul&gt;

To find out more about Freestyle and how it might be right for you, or to contact The Frontside Software for any reason, visit our &lt;a href=&quot;http://www.thefrontside.net/freestyle/forums&quot;&gt;forums&lt;/a&gt;, or drop us a line at information@thefrontside.net We'd love to hear from you.

Once again, the url for the demo is

http://thefrontside.net/freestyle/demo

Enjoy!

The Frontside Software Team</body>
        <teaser>A new version of our Freestyle Webtop Framework demo is available!</teaser>
        <timestamp>1153007197</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>32</nid>
        <vid>32</vid>
        <uid>4</uid>
        <title>Crosscheck Browserless Testing Framework</title>
        <body>&lt;div class=&quot;diagram left&quot; style=&quot;margin-right: 20px;&quot;&gt;
&lt;img src=&quot;/images/crosscheck.png&quot; alt=&quot;Crosscheck&quot;/&gt;
&lt;/div&gt;

&lt;a style=&quot;display:block; float: right; width:200px; hight: 100px; margin:10 auto;border:4px solid #D70;background-color:#F92;color:#000;text-align:center;text-decoration:none;font-weight:normal;font-size:1.5em;&quot; href=&quot;http://sourceforge.net/project/showfiles.php?group_id=169197&quot; title=&quot;Download Crosscheck&quot;&gt;Get Crosscheck Now!&lt;/a&gt;

&lt;p&gt;Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.&lt;/p&gt;

&lt;!--break--&gt;

&lt;p&gt;Because of its unique approach, Crosscheck has many advantages over other testing frameworks that are confined to running inside an actual browser:&lt;/p&gt;

&lt;h4&gt;Truly Cross Platform&lt;/h4&gt;
&lt;p&gt;Crosscheck is implemented in 100% pure Java, and &lt;em&gt;does not require a web-browser at all&lt;/em&gt;. That means it, and tests authored with it, will run anywhere Java runs, so tests targeting Internet Explorer will run just as well on Windows, Linux, and OSX. Developers can test their code against browsers that may not be available on their platform  (IE on the Mac, Safari on Windows, etc...)&lt;/p&gt;   

&lt;h4&gt;Simple Java API&lt;/h4&gt;
&lt;p&gt;Crosscheck tests can be controlled entirely via a &lt;a href=&quot;http://www.thefrontside.net/docs/java/crosscheck/index.html&quot;&gt;programatic api&lt;/a&gt; for configuring, initiating, and reporting the results of tests &lt;em&gt;as they happen&lt;/em&gt;. This allows complete control of when and how you initiate tests, as well as the format in which you report results. It could be to a GUI, to a text-based console, or even to a machine-readable format such as XML.&lt;/p&gt;

&lt;p&gt;This powerful capability also opens the possibility to extend developement tools such as Ant, Eclipse and IntelliJ to quickly run cross browser tests without the nightmare of trying to instantiate and collect results from a browser.&lt;/p&gt;

&lt;h4&gt;Fully Automatable&lt;/h4&gt;
&lt;p&gt;Because crosscheck requires nothing more than a JVM, you can automate your tests to run anywhere, anytime, on any platform without human intervention. For example, crosscheck can be used to test multi-browser code on a continuous integration server that &lt;em&gt;doesn't even have a display!&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Speed, Speed, Speed&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;It is well known that the value of a test case increases dramatically as the time needed to run it drops&lt;/em&gt;. Crosscheck tests are fast because they require little to no human interaction to start and run, and because they do not incur the overhead of starting up one, let alone multiple browsers.&lt;/p&gt;
&lt;p&gt;Crosscheck can run hundreds of multi-browser tests in a matter of seconds, allowing you more time to develop, and less time nitpicking over browser incompatibilities&lt;/p&gt;





</body>
        <teaser>&lt;div class=&quot;diagram left&quot; style=&quot;margin-right: 20px;&quot;&gt;
&lt;img src=&quot;/images/crosscheck.png&quot; alt=&quot;Crosscheck&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.&lt;/p&gt;

</teaser>
        <timestamp>1152024372</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>20</nid>
        <vid>35</vid>
        <uid>2</uid>
        <title>NOTITLE - FreeStyle Demos</title>
        <body>&lt;div style=&quot;width: 500px; margin: 20px auto;&quot;&gt;
  &lt;div style=&quot;text-align: center; margin-bottom: 10px;&quot;&gt;
    &lt;img src=&quot;/images/logo.gif&quot;/&gt;
    &lt;h1&gt;Demos of the Freestyle Webtop Framework are coming soon...&lt;/h1&gt;
  &lt;/div&gt;

  &lt;div style=&quot;border: 1px solid #777; padding: 2px 5px;&quot;&gt;
    &lt;strong&gt;In the meantime:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Read our architecture &lt;a href=&quot;/freestyle/architecture&quot;&gt;documents&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Check out the FreeStyle Toolkit &lt;a href=&quot;/docs/java&quot;&gt;Javadoc API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Provide some feedback on our &lt;a href=&quot;/freestyle/forums&quot;&gt;forums&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Subscribe to our &lt;a href=&quot;/announce_list&quot;&gt;mailing list&lt;/a&gt; to stay up-to-date with the latest news.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;!--break--&gt;</body>
        <teaser>&lt;div style=&quot;width: 500px; margin: 20px auto;&quot;&gt;
  &lt;div style=&quot;text-align: center; margin-bottom: 10px;&quot;&gt;
    &lt;img src=&quot;/images/logo.gif&quot;/&gt;
    &lt;h1&gt;Demos of the Freestyle Webtop Framework are coming soon...&lt;/h1&gt;
  &lt;/div&gt;

  &lt;div style=&quot;border: 1px solid #777; padding: 2px 5px;&quot;&gt;
    &lt;strong&gt;In the meantime:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;Read our architecture &lt;a href=&quot;/freestyle/architecture&quot;&gt;documents&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Check out the FreeStyle Toolkit &lt;a href=&quot;/docs/java&quot;&gt;Javadoc API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Provide some feedback on our &lt;a href=&quot;/freestyle/forums&quot;&gt;forums&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;Subscribe to our &lt;a href=&quot;/announce_list&quot;&gt;mailing list&lt;/a&gt; to stay up-to-date with the latest news.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;
</teaser>
        <timestamp>1146861360</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>10</nid>
        <vid>36</vid>
        <uid>2</uid>
        <title>Architecture</title>
        <body>&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
The Freestyle Event System is a powerful combination of concepts from many different event models that we've used over the years. We've taken the best things from each of these, while at the same time, leaving out the non-intuitive or non essential bits to give you the simplest possible API without sacrificing any of the precision you might need to handle an event in the right place and at the right time.
&lt;/p&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. The simplest way to do this in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code alt='provide a link to javadocs?'&gt;onEvent()&lt;/code&gt; method of a &lt;code&gt;Component&lt;/Code&gt;. With it, you can be notified whenever an event of &lt;a href=&quot;/javascript:alert('link to enumeration of event types')&quot;&gt;any type&lt;/a&gt; occurs on any &lt;a href=&quot;/javascript:alert('link to Component API')&quot;&gt;Component&lt;/a&gt;. Example:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      System.out.println(event.getTarget() + &quot; was clicked at &quot; + event.getX() + &quot;, &quot; + event.getY());
   }
});
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

will invoke the &lt;code&gt;handle()&lt;/code&gt; method of the MouseEventHandler every time the &quot;Ok&quot; button receives a click. When using the &lt;code&gt;onEvent()&lt;/code&gt; method, the component on which you called onEvent() is &lt;em&gt;always&lt;/em&gt; the target of the event.
&lt;!-- figure 1 --&gt;
&lt;div style=&quot;width: 350px; border: 3px solid blue; padding: 10px; color: blue; position: relative; margin-left: 50px; margin-top: 50px;&quot;&gt;

&lt;span style='position: absolute; font-style: italic; top: -30px; left: 100px; color: grey; font-weight: bold; font-size: 20px;'&gt;capture&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: -40px; left: 280px; color: grey; font-weight: bold; font-size: 20px;'&gt;catch&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: 65px; left: 450px; color: grey; font-weight: bold; font-size: 20px;'&gt;on&lt;/span&gt;


&lt;!-- down arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 50%; top: -40px;&quot;&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-top: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!-- end arrow --&gt;

&lt;!-- up arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 68%; top: -50px;&quot;&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-bottom: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end up arrow --&gt;

&lt;!-- side arrow --&gt;
&lt;div style=&quot;position: absolute; left: 80%; top: 55%;&quot;&gt;
&lt;div style=&quot;height: 1px; width: 10px; border-right: 10px solid black; border-bottom: 10px solid white; border-top: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;position: absolute; left: 19px; top: 9px; height: 5px; width: 155px; background-color: black;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end side arrow --&gt;

Component A
	&lt;div style=&quot;border: 3px solid red; margin-left: 25px; padding: 10px; margin: 5px; color: red;&quot;&gt;Component B
		&lt;div style=&quot;border: 3px solid black; margin-left: 25px; padding: 10px; margin: 5px; color: black;&quot;&gt;Component C&lt;/div&gt;
	&lt;/div&gt;

&lt;/div&gt;
&lt;!-- end figure 1 --&gt;</body>
        <teaser>&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
The Freestyle Event System is a powerful combination of concepts from many different event models that we've used over the years. We've taken the best things from each of these, while at the same time, leaving out the non-intuitive or non essential bits to give you the simplest possible API without sacrificing any of the precision you might need to handle an event in the right place and at the right time.
&lt;/p&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;</teaser>
        <timestamp>1141259090</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>10</nid>
        <vid>37</vid>
        <uid>2</uid>
        <title>Architecture</title>
        <body>&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
The Freestyle Event System is a powerful combination of concepts from many different event models that we've used over the years. We've taken the best things from each of these, while at the same time, leaving out the non-intuitive or non essential bits to give you the simplest possible API without sacrificing any of the precision you might need to handle an event in the right place and at the right time.
&lt;/p&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. The simplest way to do this in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code alt='provide a link to javadocs?'&gt;onEvent()&lt;/code&gt; method of a &lt;code&gt;Component&lt;/Code&gt;. With it, you can be notified whenever an event of &lt;a href=&quot;/javascript:alert('link to enumeration of event types')&quot;&gt;any type&lt;/a&gt; occurs on any &lt;a href=&quot;/javascript:alert('link to Component API')&quot;&gt;Component&lt;/a&gt;. Example:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      System.out.println(event.getTarget() + &quot; was clicked at &quot; + event.getX() + &quot;, &quot; + event.getY());
   }
});
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

will invoke the &lt;code&gt;handle()&lt;/code&gt; method of the MouseEventHandler every time the &quot;Ok&quot; button receives a click. When using the &lt;code&gt;onEvent()&lt;/code&gt; method, the component on which you called onEvent() is &lt;em&gt;always&lt;/em&gt; the target of the event.
&lt;!-- figure 1 --&gt;
&lt;div style=&quot;width: 350px; border: 3px solid blue; padding: 10px; color: blue; position: relative; margin-left: 50px; margin-top: 50px;&quot;&gt;

&lt;span style='position: absolute; font-style: italic; top: -30px; left: 100px; color: grey; font-weight: bold; font-size: 20px;'&gt;capture&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: -40px; left: 280px; color: grey; font-weight: bold; font-size: 20px;'&gt;catch&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: 65px; left: 450px; color: grey; font-weight: bold; font-size: 20px;'&gt;on&lt;/span&gt;


&lt;!-- down arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 50%; top: -40px;&quot;&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-top: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!-- end arrow --&gt;

&lt;!-- up arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 68%; top: -50px;&quot;&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-bottom: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end up arrow --&gt;

&lt;!-- side arrow --&gt;
&lt;div style=&quot;position: absolute; left: 80%; top: 55%;&quot;&gt;
&lt;div style=&quot;height: 1px; width: 10px; border-right: 10px solid black; border-bottom: 10px solid white; border-top: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;position: absolute; left: 19px; top: 9px; height: 5px; width: 155px; background-color: black;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end side arrow --&gt;

Component A
	&lt;div style=&quot;border: 3px solid red; margin-left: 25px; padding: 10px; margin: 5px; color: red;&quot;&gt;Component B
		&lt;div style=&quot;border: 3px solid black; margin-left: 25px; padding: 10px; margin: 5px; color: black;&quot;&gt;Component C&lt;/div&gt;
	&lt;/div&gt;

&lt;/div&gt;
&lt;!-- end figure 1 --&gt;
&lt;!--break--&gt;</body>
        <teaser>&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
The Freestyle Event System is a powerful combination of concepts from many different event models that we've used over the years. We've taken the best things from each of these, while at the same time, leaving out the non-intuitive or non essential bits to give you the simplest possible API without sacrificing any of the precision you might need to handle an event in the right place and at the right time.
&lt;/p&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. The simplest way to do this in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code alt='provide a link to javadocs?'&gt;onEvent()&lt;/code&gt; method of a &lt;code&gt;Component&lt;/Code&gt;. With it, you can be notified whenever an event of &lt;a href=&quot;/javascript:alert('link to enumeration of event types')&quot;&gt;any type&lt;/a&gt; occurs on any &lt;a href=&quot;/javascript:alert('link to Component API')&quot;&gt;Component&lt;/a&gt;. Example:
&lt;/p&gt;
&lt;p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      System.out.println(event.getTarget() + &quot; was clicked at &quot; + event.getX() + &quot;, &quot; + event.getY());
   }
});
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;/p&gt;

will invoke the &lt;code&gt;handle()&lt;/code&gt; method of the MouseEventHandler every time the &quot;Ok&quot; button receives a click. When using the &lt;code&gt;onEvent()&lt;/code&gt; method, the component on which you called onEvent() is &lt;em&gt;always&lt;/em&gt; the target of the event.
&lt;!-- figure 1 --&gt;
&lt;div style=&quot;width: 350px; border: 3px solid blue; padding: 10px; color: blue; position: relative; margin-left: 50px; margin-top: 50px;&quot;&gt;

&lt;span style='position: absolute; font-style: italic; top: -30px; left: 100px; color: grey; font-weight: bold; font-size: 20px;'&gt;capture&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: -40px; left: 280px; color: grey; font-weight: bold; font-size: 20px;'&gt;catch&lt;/span&gt;

&lt;span style='position: absolute; font-style: italic; top: 65px; left: 450px; color: grey; font-weight: bold; font-size: 20px;'&gt;on&lt;/span&gt;


&lt;!-- down arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 50%; top: -40px;&quot;&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-top: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;!-- end arrow --&gt;

&lt;!-- up arrow --&gt;
&lt;div style=&quot;text-align: center; position: absolute; left: 68%; top: -50px;&quot;&gt;
&lt;div style=&quot;height: 10px; width: 1px; border-left: 10px solid white; border-bottom: 10px solid black; border-right: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;height: 125px; width: 5px; background-color: black; margin-left: 8px;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end up arrow --&gt;

&lt;!-- side arrow --&gt;
&lt;div style=&quot;position: absolute; left: 80%; top: 55%;&quot;&gt;
&lt;div style=&quot;height: 1px; width: 10px; border-right: 10px solid black; border-bottom: 10px solid white; border-top: 10px solid white;&quot;&gt;&lt;/div&gt;
&lt;div style=&quot;position: absolute; left: 19px; top: 9px; height: 5px; width: 155px; background-color: black;&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;!-- end side arrow --&gt;

Component A
	&lt;div style=&quot;border: 3px solid red; margin-left: 25px; padding: 10px; margin: 5px; color: red;&quot;&gt;Component B
		&lt;div style=&quot;border: 3px solid black; margin-left: 25px; padding: 10px; margin: 5px; color: black;&quot;&gt;Component C&lt;/div&gt;
	&lt;/div&gt;

&lt;/div&gt;
&lt;!-- end figure 1 --&gt;
</teaser>
        <timestamp>1141261190</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>10</nid>
        <vid>38</vid>
        <uid>4</uid>
        <title>Architecture</title>
        <body>&lt;style type='text/css'&gt;
code {
   font-family: fixed-width;
   font-size: 10pt;
}
&lt;/style&gt;

&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. We call this process &lt;em&gt;registering event handlers&lt;/em&gt;. To react to a specific event, you notify a component that you want to run a bit of code every time Freestyle detects that an event of a certain type event has occured. This bit of code is called the &lt;em&gt;event handler&lt;/em&gt;. 
&lt;/p&gt;
&lt;h3&gt;On Event&lt;/h3&gt;
&lt;p&gt;
The simplest way to register an &lt;em&gt;event handler&lt;/em&gt; in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code alt='provide a link to javadocs?'&gt;onEvent()&lt;/code&gt; method of &lt;code&gt;Component&lt;/Code&gt;. With it, you can be notified whenever &lt;em&gt;that component&lt;/em&gt; receives an event of &lt;a href=&quot;/javascript:alert('link to enumeration of event types')&quot;&gt;a specific type&lt;/a&gt;. Example:
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      System.out.println(event.getTarget() + &quot; was clicked at &quot; + event.getX() + &quot;, &quot; + event.getY());
   }
});
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;handle()&lt;/code&gt; method of MouseEventHandler is invoked every time the &quot;Ok&quot; button receives a &quot;click&quot; event. It is important to note that when using the &lt;code&gt;onEvent()&lt;/code&gt; method of a component, the event handler is only invoked for events which have &lt;em&gt;that component&lt;/em&gt; as their target. 
&lt;blockquote&gt;
&lt;b&gt;Important&lt;/b&gt;&lt;br/&gt;
Calling &lt;code&gt;onEvent()&lt;/code&gt; on a component to register an event handler will only call that event handler when that component &lt;em&gt;is the event target&lt;/em&gt;.
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Sometimes however, the need arises to register event handlers in a more flexible way than with just a specific target as you do with &lt;code&gt;onEvent()&lt;/code&gt;.
&lt;/p&gt;
&lt;h3&gt;Catch Event&lt;/h3&gt;
&lt;p&gt;
Suppose you have a component with many fields for text entry. To make it more usable, you would like to add a keyboard shortcut to reset all of the fields whenever the user presses &quot;CTRL+R&quot;. To do so, you must first implement the &lt;a href=&quot;/javascript:alert('link to javadocs')&quot;&lt;code&gt;KeyEventHandler&lt;code&gt;&lt;/a&gt; interface:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
public class MyFormReset implements KeyEventHandler {
   private MyForm form;
   public MyFormReset(MyForm form) {
      this.form = form;
   }
   public void handle(KeyEvent event) {
      if (event.hasCtrlKey() &amp;&amp; event.isChar('r')) {
         this.form.reset();
      }
   }
}
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This defines the event handler, but where do you &lt;em&gt;register&lt;/em&gt; it?. You could use &lt;code&gt;onEvent()&lt;/code&gt; inside the constructor of the &lt;code&gt;MyForm&lt;/code&gt; class, but you would have to call it once for every single field of text contained in your form. Matters would be complicated still if you were to dynamically add fields to your form at runtime: you would need to remember to register your event handler with each new field as it was added!
&lt;/p&gt;
&lt;p&gt;
Rather than manage that complexity, &lt;b&gt;Freestyle&lt;/b&gt; provides another, more flexible way of registering event handlers: &lt;code&gt;catchEvent()&lt;/code&gt;. Registering a handler for an event type on a component  with &lt;code&gt;catchEvent()&lt;/code&gt; will invoke that event handler whenever that component &lt;em&gt;or any of its children&lt;/em&gt; receive that event. In the case of our form:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
public class MyForm extends Component {
   public MyForm() {
      this.catchEvent(&quot;keydown&quot;, new MyFormReset(this));
   }
   //class definition...
}
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The MyFormReset event handler will be invoked whenever &lt;em&gt;any component contained inside the form&lt;/em&gt; receives a &quot;keydown&quot; event, which is exactly the behavior by this example.
&lt;blockquote&gt;
&lt;strong&gt;Caution:&lt;/strong&gt; Unlike &lt;code&gt;onEvent()&lt;/code&gt;, event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt; can be invoked for events with many different targets, so it is not safe to assume anything about which object the event target is (except that it is the invocant of &lt;code&gt;catchEvent()&lt;/code&gt; or &lt;em&gt;one of its children&lt;/em&gt;)
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;h3&gt;Event Order&lt;/h3&gt;
&lt;p&gt;
With &lt;code&gt;catchEvent()&lt;/code&gt;, both a component&lt;em&gt; and its ancestors&lt;/em&gt; can listen for events that are received by that component. But what happens if &lt;em&gt;both&lt;/em&gt; that component &lt;em&gt;and&lt;/em&gt; one or more of its ancestors have registered event handlers for the same event?
&lt;/p&gt;
&lt;p&gt;
To illustrate the problem, suppose we have three elements, all of which have registered &quot;click&quot; event handlers with &lt;code&gt;catchEvent()&lt;/code&gt;.
&lt;span style='font-weight: bold; margin: 15px 5px 5px; display: block;'&gt;
&lt;img style= 'display: block;' margin-bottom: 3px;' src=&quot;/files/event-flow01.png&quot;/&gt;
&lt;span style='margin-left: 5px;'&gt;Fig. 1 &lt;span style=&quot;font-size: 9pt&quot;&gt;(how the hell to float this?)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
Whenever &lt;code&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/code&gt; receives a &quot;click&quot; event, all three components will have their event handler's invoked. But in what order? For event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt;, the dispatch begins at the target and proceeds up the &lt;a href=&quot;/javascript:alert('link to hiearchy docs')&quot;&gt;component hierarchy&lt;/a&gt;. So in this case, the &quot;click&quot; event handler for &lt;code&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/code&gt; will be invoked first, followed by &lt;code&gt;&lt;strong&gt;container&lt;/strong&gt;&lt;/code&gt;, followed by &lt;code&gt;&lt;strong&gt;parent&lt;/strong&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;div style='width: 100%; border: solid 1px black;'&gt;
figure of catch dispatch here, floated right?
&lt;/div&gt;
The full story, explained in the following section, is that &lt;code&gt;catchEvent()&lt;/code&gt; registers an event handler to be fired during the &lt;em&gt;catch phase&lt;/em&gt; of event dispatch, and that this phase proceeds &lt;em&gt;up the component hierarchy&lt;/em&gt;
&lt;/p&gt;
&lt;h3&gt;Phases of dispatch&lt;/h3&gt;
&lt;p&gt;
You may have already asked yourself the question: what happens when there 
&lt;/p&gt;
&lt;img src=&quot;/files/event-flow02.png&quot;/&gt;</body>
        <teaser>&lt;style type='text/css'&gt;
code {
   font-family: fixed-width;
   font-size: 10pt;
}
&lt;/style&gt;

&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;</teaser>
        <timestamp>1141303980</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>10</nid>
        <vid>39</vid>
        <uid>2</uid>
        <title>Architecture</title>
        <body>&lt;style type='text/css'&gt;
code {
   font-family: fixed-width;
   font-size: 10pt;
}
&lt;/style&gt;

&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
The process of building your program's interface then becomes a simple exercise in connecting behaviors to the these events. We call this process &lt;em&gt;registering event handlers&lt;/em&gt;. To react to a specific event, you notify a component that you want to run a bit of code every time Freestyle detects that an event of a certain type event has occured. This bit of code is called the &lt;em&gt;event handler&lt;/em&gt;. 
&lt;/p&gt;
&lt;h3&gt;On Event&lt;/h3&gt;
&lt;p&gt;
The simplest way to register an &lt;em&gt;event handler&lt;/em&gt; in &lt;b&gt;Freestyle&lt;/b&gt; is with the &lt;code alt='provide a link to javadocs?'&gt;onEvent()&lt;/code&gt; method of &lt;code&gt;Component&lt;/Code&gt;. With it, you can be notified whenever &lt;em&gt;that component&lt;/em&gt; receives an event of &lt;a href=&quot;/javascript:alert('link to enumeration of event types')&quot;&gt;a specific type&lt;/a&gt;. Example:
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
Button button = new Button(&quot;Ok&quot;);
button.onEvent(&quot;click&quot;, new MouseEventHandler() {
   public void handle(MouseEvent event) {
      System.out.println(event.getTarget() + &quot; was clicked at &quot; + event.getX() + &quot;, &quot; + event.getY());
   }
});
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
The &lt;code&gt;handle()&lt;/code&gt; method of MouseEventHandler is invoked every time the &quot;Ok&quot; button receives a &quot;click&quot; event. It is important to note that when using the &lt;code&gt;onEvent()&lt;/code&gt; method of a component, the event handler is only invoked for events which have &lt;em&gt;that component&lt;/em&gt; as their target. 
&lt;blockquote&gt;
&lt;b&gt;Important&lt;/b&gt;&lt;br/&gt;
Calling &lt;code&gt;onEvent()&lt;/code&gt; on a component to register an event handler will only call that event handler when that component &lt;em&gt;is the event target&lt;/em&gt;.
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;p&gt;
Sometimes however, the need arises to register event handlers in a more flexible way than with just a specific target as you do with &lt;code&gt;onEvent()&lt;/code&gt;.
&lt;/p&gt;
&lt;h3&gt;Catch Event&lt;/h3&gt;
&lt;p&gt;
Suppose you have a component with many fields for text entry. To make it more usable, you would like to add a keyboard shortcut to reset all of the fields whenever the user presses &quot;CTRL+R&quot;. To do so, you must first implement the &lt;a href=&quot;/javascript:alert('link to javadocs')&quot;&lt;code&gt;KeyEventHandler&lt;code&gt;&lt;/a&gt; interface:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
public class MyFormReset implements KeyEventHandler {
   private MyForm form;
   public MyFormReset(MyForm form) {
      this.form = form;
   }
   public void handle(KeyEvent event) {
      if (event.hasCtrlKey() &amp;&amp; event.isChar('r')) {
         this.form.reset();
      }
   }
}
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;p&gt;
This defines the event handler, but where do you &lt;em&gt;register&lt;/em&gt; it?. You could use &lt;code&gt;onEvent()&lt;/code&gt; inside the constructor of the &lt;code&gt;MyForm&lt;/code&gt; class, but you would have to call it once for every single field of text contained in your form. Matters would be complicated still if you were to dynamically add fields to your form at runtime: you would need to remember to register your event handler with each new field as it was added!
&lt;/p&gt;
&lt;p&gt;
Rather than manage that complexity, &lt;b&gt;Freestyle&lt;/b&gt; provides another, more flexible way of registering event handlers: &lt;code&gt;catchEvent()&lt;/code&gt;. Registering a handler for an event type on a component  with &lt;code&gt;catchEvent()&lt;/code&gt; will invoke that event handler whenever that component &lt;em&gt;or any of its children&lt;/em&gt; receive that event. In the case of our form:
&lt;/p&gt;
&lt;blockquote&gt;
&lt;code&gt;&lt;pre&gt;
public class MyForm extends Component {
   public MyForm() {
      this.catchEvent(&quot;keydown&quot;, new MyFormReset(this));
   }
   //class definition...
}
&lt;/pre&gt;&lt;/code&gt;
&lt;/blockquote&gt;
&lt;p&gt;
The MyFormReset event handler will be invoked whenever &lt;em&gt;any component contained inside the form&lt;/em&gt; receives a &quot;keydown&quot; event, which is exactly the behavior required by this example.
&lt;blockquote&gt;
&lt;strong&gt;Caution:&lt;/strong&gt; Unlike &lt;code&gt;onEvent()&lt;/code&gt;, event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt; can be invoked for events with many different targets, so it is not safe to assume anything about which object the event target is (except that it is the invocant of &lt;code&gt;catchEvent()&lt;/code&gt; or &lt;em&gt;one of its children&lt;/em&gt;)
&lt;/blockquote&gt;
&lt;/p&gt;
&lt;h3&gt;Event Order&lt;/h3&gt;
&lt;p&gt;
With &lt;code&gt;catchEvent()&lt;/code&gt;, both a component&lt;em&gt; and its ancestors&lt;/em&gt; can listen for events that are received by that component. But what happens if &lt;em&gt;both&lt;/em&gt; that component &lt;em&gt;and&lt;/em&gt; one or more of its ancestors have registered event handlers for the same event?
&lt;/p&gt;
&lt;p&gt;
To illustrate the problem, suppose we have three elements, all of which have registered &quot;click&quot; event handlers with &lt;code&gt;catchEvent()&lt;/code&gt;.
&lt;span style='font-weight: bold; margin: 15px 5px 5px; display: block;'&gt;
&lt;img style= 'display: block;' margin-bottom: 3px;' src=&quot;/files/event-flow01.png&quot;/&gt;
&lt;span style='margin-left: 5px;'&gt;Fig. 1 &lt;span style=&quot;font-size: 9pt&quot;&gt;(how the hell to float this?)&lt;/span&gt;&lt;/span&gt;
&lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
Whenever &lt;code&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/code&gt; receives a &quot;click&quot; event, all three components will have their event handler's invoked. But in what order? For event handlers registered with &lt;code&gt;catchEvent()&lt;/code&gt;, the dispatch begins at the target and proceeds up the &lt;a href=&quot;/javascript:alert('link to hiearchy docs')&quot;&gt;component hierarchy&lt;/a&gt;. So in this case, the &quot;click&quot; event handler for &lt;code&gt;&lt;strong&gt;target&lt;/strong&gt;&lt;/code&gt; will be invoked first, followed by &lt;code&gt;&lt;strong&gt;container&lt;/strong&gt;&lt;/code&gt;, followed by &lt;code&gt;&lt;strong&gt;parent&lt;/strong&gt;&lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;div style='float: right; border: solid 1px black;'&gt;
figure of catch dispatch here?
&lt;/div&gt;
The full story, explained in the following section, is that &lt;code&gt;catchEvent()&lt;/code&gt; registers an event handler to be fired during the &lt;em&gt;catch phase&lt;/em&gt; of event dispatch, and that this phase proceeds &lt;em&gt;up the component hierarchy&lt;/em&gt;
&lt;/p&gt;
&lt;h3&gt;Phases of Dispatch&lt;/h3&gt;
&lt;p&gt;
&lt;b&gt;Freestyle&lt;/b&gt; event dispatch is divided into three distinct phases: &lt;em&gt;capture&lt;/em&gt;, &lt;em&gt;on&lt;/em&gt;, and &lt;em&gt;catch&lt;/em&gt;, which proceed in that order.
&lt;/p&gt;
&lt;ol&gt;
   &lt;li&gt;Capture: &lt;em&gt;registered with &lt;code&gt;captureEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
   This is the first phase of event dispatch. All &quot;capture&quot; handlers for an event are invoked before 
   entering the next phase. The invocation of event handlers proceeds 
   &lt;em&gt;down the component hierarchy&lt;/em&gt;, beginning with the top-most component, and ending with the 
   event target
   &lt;li&gt;On: &lt;em&gt;registered with &lt;code&gt;onEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
   All &quot;on&quot; handlers are invoked after all &quot;capture&quot; handlers, but before any &quot;catch&quot; handlers. This
   only invokes handlers registered &lt;em&gt;on the target of the event being dispatched&lt;/em&gt;. It specifically
   does &lt;strong&gt;not&lt;/strong&gt; invoke any event handlers on any of target's ancestors.
   &lt;li&gt;Catch: &lt;em&gt;registered with &lt;code&gt;catchEvent()&lt;/code&gt;&lt;/em&gt;&lt;/li&gt;
   The last phase of dispatch, &quot;catch&quot; handlers are dispatched after all other phases have finished. The
   invocation of catch handlers proceeds &lt;em&gt;up the component hierarchy&lt;/em&gt; beginning with the event
   target, and ending with the top-most component.
&lt;/ol&gt;

&lt;img src=&quot;/files/event-flow02.png&quot;/&gt;</body>
        <teaser>&lt;style type='text/css'&gt;
code {
   font-family: fixed-width;
   font-size: 10pt;
}
&lt;/style&gt;

&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;
In &lt;strong&gt;Freestyle&lt;/strong&gt;, &lt;code&gt;Components&lt;/code&gt; are the fundamental unit of event dispatch. What does that mean? It means that whenever a user interface event occurs, whether it is caused by typing a key on the keyboard, or pressing a button on the mouse, that event will be said to have happened &lt;em&gt;on a component&lt;/em&gt;. For example, typing a letter into a field of text, will generate a 'keydown' event &lt;em&gt;on that text field&lt;/em&gt;, or clicking the mouse button while the pointer is over a check-box, will generate a &quot;click&quot; event &lt;em&gt;on that check box&lt;/em&gt;. In fact, every event, no matter what type, always has a single component associated with it. That component is called the &lt;em&gt;event target&lt;/em&gt;
&lt;/p&gt;</teaser>
        <timestamp>1141318724</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>39</nid>
        <vid>45</vid>
        <uid>2</uid>
        <title>Crosscheck Tutorial</title>
        <body>&lt;h3&gt;The Tutorial Has Moved&lt;/h3&gt;

&lt;p&gt;All documentation related to Crosscheck has been moved to &lt;a href=&quot;http://dev.thefrontside.net/crosscheck&quot; title=&quot;Crosscheck Development Site&quot;&gt;our development site&lt;/a&gt;. You can read the current version of the &lt;a href=&quot;http://dev.thefrontside.net/crosscheck/wiki/AddEventTutorial&quot; title=&quot;Crosscheck Tutorial&quot;&gt;addEvent Tutorial here.&lt;/a&gt;&lt;/p&gt;</body>
        <teaser>&lt;p&gt;Crosscheck is a unit-testing framework designed to simulate the javascript execution environments for a variety of browsers. This allows javascript library authors to perform cross-browser testing on their libraries without the overhead of running the tests in an actual browser. In this article, I'm going to briefly explain the principles behind Crosscheck, and provide a simple example of its usage.&lt;/p&gt;</teaser>
        <timestamp>1182000843</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>64</nid>
        <vid>72</vid>
        <uid>4</uid>
        <title>Please Stop Using Global Variables In Ruby</title>
        <body>I couldn't sleep this morning. I woke up around 4:30 AM thinking about how code is organized in ruby. I'm sure I will look back on my life with disbelief and a touch of shame at such behavior, but that is (hopefully) decades away.

The problem turning around in my head which eventually caused me to wake was my own inability to come to terms with a prevalent pattern in the ruby community: the global variable. Swirling in my semi-conscious mind was a motley mixture of bewilderment, self-doubt, scorn and a touch of righteous indignation. 

On the one hand, there must be something I'm missing. One of the reasons I love ruby-space is that it tends to be filled with talented programmers who work the language to produce code that is powerful while at the same time being easy to understand and use. Surely, their collective conscious is a better guide than my own experience and intuition. I worry that is primarily my own fuddy-duddity that prevents me from accepting global variables as good practice.

To clarify, when I speak about global variables, I'm talking primarily about using global class objects as the repositories for methods and state. There are plenty examples out there of this:

&lt;code type=&quot;ruby&quot;&gt;
# active record
Post.find(:all)

# amazon s3
S3Object.store('me.jpg', open('headshot.jpg'), 'photos')

# paypal-business gem
Paypal.capture(params)
&lt;/code&gt;

In each of the preceding examples, there is implicit state stored on the class object. In active record, the database connection information, in S3Object, the AWS access key id and secret key, and finally, in Paypal, the paypal server url and business account name. Because the class object is global, the state on it is effectively global. And &lt;em&gt;that&lt;/em&gt; is what sets my spidey sense to tingling.

Not only is this style subject to the all the arguments for why &lt;a href=&quot;http://c2.com/cgi/wiki?GlobalVariablesAreBad&quot;&gt;global variables are bad&lt;/a&gt;, but it just flat-out makes the API's themselves less useful. Here's an example from an actual project.

I had a system which needed to talk to two different SQS queues which were contained in two separate amazon web services accounts. Unfortunately, the standard SQS api uses class variables to store configuration information, and then a set of class methods to access the queue services, so I was forced to overwrite the global configuration parameters every time I wanted to access the queue. Luckily, the application was not multi threaded, or I would have been stuck rolling my own.

I don't see why:
&lt;code type=&quot;ruby&quot;&gt;
SQS.access_key_id = 'ACCESS_ID'
SQS.secret_access_key = 'SECRET'
q = SQS.get_queue 'MyQueue'
&lt;/code&gt;

is any better than:
&lt;code type=&quot;ruby&quot;&gt;
@sqs = SQS.new :access_key_id =&gt; 'ACCESS_ID', :secret_access_key =&gt; 'SECRET'
q = @sqs.get_queue 'MyQueue'
&lt;/code&gt;
(IMHO it's uglier) and in the second, hypothetical API, you can painlessly, and in a thread-safe manner talk to multiple queues on multiple accounts.

&lt;code type=&quot;ruby&quot;&gt;
@one = SQS.new :access_key_id =&gt; 'AccountOne', :secret_access_key =&gt; &quot;AccountOneSecret&quot;
@two = SQS.new :access_key_id =&gt; 'AccountTwo', :secret_access_key =&gt; &quot;AccountTwoSecret&quot;
&lt;/code&gt;

But there's a deeper principle at stake here than allowing multiple instances. It's about giving &lt;em&gt;power to the programmer&lt;/em&gt;, and letting them control the API, and not the other way around. 

It seems to me that when you're designing an API, you want the programmer(to the greatest extent possible) be able to create their own little world over which they have complete control. The should be able to spin up as many instances of your code and use it in ways that perhaps you hadn't thought of without them having to worry that one world will interfere with another world they've created.

If you've absolutely got to go global, it's very little effort to wrap a static/global interface around a single default instance, but not the other way around. Given the similarity in effort, it seems like embedability is the way to go.

Global variables surely have their place in some applications, and I'm not opposed to them on purely ideological grounds, but ruby already has a construct for global variables... it's called the '$' sigil. 

In your environment.rb, or wherever you can just put:
&lt;code type=&quot;ruby&quot;&gt;
#environment.rb
$sqs = SQS.new :access_key_id =&gt; 'AccountOne', :secret_access_key =&gt; &quot;AccountOneSecret&quot;

#somewhere else
q = $sqs.get_queue &quot;MyQueue&quot;
&lt;/code&gt;

My suspicion is that Ruby on Rails shares a large portion of the blame for the evolution of this style what with &lt;code&gt;ActiveRecord.establish_connection()&lt;/code&gt; and friends. As the highest profile ruby project it's only natural that people will copy its conventions --for better or for worse. Still, I wish people in the future would break from this particular precedent and if they go global, to do it properly. Give the poor class objects a break!
</body>
        <teaser>From Ruby on Rails, to the Amazon Web Services libraries, the ruby culture has a serious love-affair with global variables which I have yet to grasp.</teaser>
        <timestamp>1214424738</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>40</nid>
        <vid>46</vid>
        <uid>2</uid>
        <title>Freestyle Focus System</title>
        <body>Freestyle provides the ability for web site developers to completely control the focus behavior of their applications. Any component can be made focusable, and the tabbing order can be completely customized. More documentation for the Freestyle focus system will be available soon.</body>
        <teaser>Freestyle provides the ability for web site developers to completely control the focus behavior of their applications. Any component can be made focusable, and the tabbing order can be completely customized. More documentation for the Freestyle focus system will be available soon.</teaser>
        <timestamp>1152560810</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>46</nid>
        <vid>52</vid>
        <uid>2</uid>
        <title>Learning Javascript from the Command Line.</title>
        <body>&lt;p&gt;In the &lt;a href=&quot;http://www.drunkandretired/podcast&quot;&gt;Drunk and Retired Podcast&lt;/a&gt;, &lt;a href=&quot;http://www.drunkandretired.com/2006/07/08/drunkandretiredcom-podcast-episode-59-lightside-v-darkside-plus-learning-javascript-the-language-not-the-javascript-the-browser-scriptus/#comments&quot;&gt;episode  59&lt;/a&gt; I spoke about learning your way around javascript the language independently from the browser, and how you can use the command line tools that come with the various javascript engines to interactively explore the javascript runtime.&lt;/p&gt;

&lt;p&gt;When most folks think about javascript, they think about scripts that they embed into their web pages, but the truth is that it is a general-purpose programming language &lt;em&gt;that has absolutely nothing to do with HTML&lt;/em&gt;. In fact, the javascript runtime is so orthogonal to other web browser functionality, that mozilla offers the javascript interpreter that it uses in Firefox and friends as a &lt;a href=&quot;http://www.mozilla.org/js/spidermonkey&quot;&gt;completely separate download&lt;/a&gt;. It's available as both .deb or .rpm package, and just to show it: Here's the wonderful hello world program, as entered into the shell.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
cowboyd@subzero:~$ js
js&gt; alert('hello world')
1: ReferenceError: alert is not defined
js&gt;    
&lt;/code&gt;

&lt;p&gt;OK, so I boobie-trapped that example in an attempt to beat the point I've been making to death. It's an error because &lt;code type=&quot;javascript&quot;&gt;alert()&lt;/code&gt; isn't actually part of javascript. In the context with which we're familiar(DHTML), it's a function that's &lt;em&gt;defined by the browser&lt;/em&gt;. Of course, it just so happens that every browser implements &lt;code type=&quot;javascript&quot;&gt;alert()&lt;/code&gt; to behave in almost exactly the same way, but the function itself has nothing to do with the javascript core. Implementing our own version of alert is simple enough though.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
js&gt; var alert = function(message) { print(message)}
js&gt; alert('hello world')
hello world
js&gt;            
&lt;/code&gt;

&lt;p&gt;Personally, I love the command line because it let's you dig your fingers deep into the computer's brain and, by pushing its buttons directly, see what's going to work and what isn't. Every time I have a question about how the javascript interpreter is going to behave, I don't look up the spec, or write something into my programs that I'm not sure how it will work. Instead, I fire up my trusty interpreter to discover &lt;em&gt;empirically&lt;/em&gt; how the system works. Need to know if a RegExp is going to match? Don't guess. Ask the interpreter.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
js&gt; &quot;foo&quot;.match(/bar/)
null
js&gt; &quot;foo&quot;.match(/oo/)
oo
js&gt; &quot;foo&quot;.match(/oo$/)
oo
js&gt;             
&lt;/code&gt;

&lt;p&gt;Wonder what the built-in &quot;constructor&quot; property of an object is? The runtime can tell you. It's his business after all.&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
js&gt; function A() {}
js&gt; var a = new A()
js&gt; var o = new Object()
js&gt; a.constructor

function A() {
}

js&gt; o.constructor

function Object() {
    [native code]
}

js&gt; o.constructor == Object
true
js&gt; a.constructor == A
true
js&gt;                            
&lt;/code&gt;

&lt;p&gt;Sure, you could write an in-browser script to do all this and throw output at yourself in the form of alerts, but the beauty of the javascript command line is that you can collapse the whole edit-save-reload-alert scripting cycle into a single step; type in the next line and see what happens. It's that super-tight feedback which let's you learn that much faster.&lt;/p&gt;</body>
        <teaser>&lt;p&gt;In the &lt;a href=&quot;http://www.drunkandretired/podcast&quot;&gt;Drunk and Retired Podcast&lt;/a&gt;, &lt;a href=&quot;http://www.drunkandretired.com/2006/07/08/drunkandretiredcom-podcast-episode-59-lightside-v-darkside-plus-learning-javascript-the-language-not-the-javascript-the-browser-scriptus/#comments&quot;&gt;episode  59&lt;/a&gt; I spoke about learning your way around javascript the language independently from the browser, and how you can use the command line tools that come with the various javascript engines to interactively explore the javascript runtime.&lt;/p&gt;

&lt;p&gt;When most folks think about javascript, they think about scripts that they embed into their web pages, but the truth is that it is a general-purpose programming language &lt;em&gt;that has absolutely nothing to do with HTML&lt;/em&gt;. In fact, the javascript runtime is so orthogonal to other web browser functionality, that mozilla offers the javascript interpreter that it uses in Firefox and friends as a &lt;a href=&quot;http://www.mozilla.org/js/spidermonkey&quot;&gt;completely separate download&lt;/a&gt;.</teaser>
        <timestamp>1154537376</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>35</nid>
        <vid>41</vid>
        <uid>2</uid>
        <title>Live Stylesheets</title>
        <body>&lt;p&gt;Even after working with DTML for over a year, I'm still constantly astounded by how &lt;em&gt;dynamic it actually is&lt;/em&gt;. The most important thing to keep in the back of your head as a DHTML programmer is that the same mechanisms used by the browser to build an HTML document at load time are available to your in-page scripts. So, really, the static loading of your pages when you access a url is just the HTML parser invoking the same methods on the same objects that are available to your javascript code.&lt;/p&gt;
&lt;!--break--&gt;
&lt;p&gt;Take this static HTML code:&lt;/p&gt;
&lt;code type=&quot;html&quot;&gt;
&lt;html&gt;
&lt;body&gt;&lt;div id=&quot;foo&quot;&gt;This is my div&lt;/div&gt;
&lt;/html&gt;
&lt;/code&gt;

&lt;p&gt;The same result can be achieved dynamically:&lt;/p&gt;
&lt;code type=&quot;html&quot;&gt;
&lt;html&gt;
&lt;body onload=&quot;addFoo()&quot;&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
function addFoo() {
   var foo = document.createElement('div')
   foo.id = &quot;foo&quot;
   var fooContent = document.createTextNode(&quot;This is my div&quot;)
   foo.appendChild(fooContent)
   document.body.appendChild(foo)
}   
&lt;/script&gt;
&lt;/html&gt;
&lt;/code&gt;

&lt;p&gt;Nothing mind-blowing there; indeed, this technique is the cornerstone of DHTML. But it takes awhile to let it sink in to the point where using it is one of your first strategies to solving a problem. Specifically, you can use it not only to dynamically change layout-related HTML elements (span, div, ul, table, et al...), but also to create/modify &lt;em&gt;behavioral elements&lt;/em&gt;(link, script, meta, etc...)&lt;/p&gt;

&lt;p&gt;That said, I was recently trying to create a CSS stylesheet at runtime, and enable it so that its rules would be active in the page. At first, I was trying to use the &lt;a href=&quot;http://www.w3.org/TR/DOM-Level-2-Style/ecma-script-binding.html&quot;&gt;W3C DOM CSS interface&lt;/a&gt;, the idea being to  create a stylesheet object, add a bunch of rules to it corresponding to the rules that I wanted, and then put it into the stylesheets array. Unfortunately, doing this in a cross-platform way is &lt;a href=&quot;http://www.quirksmode.org/dom/w3c_css.html&quot;&gt;borderline impossible&lt;/a&gt;. After pounding my head against that for awhile and getting nowhere,  I figured, &quot;why not just create the whole thing as a top-level html element, and let the browser just take it away from there?&quot; The basic strategy is this: create a &lt;code&gt;&lt;style&gt;&lt;/code&gt; DOM Element dynamically, add text content to it representing the actual stylesheet, and then pop it into the HTML DOM. With a few caveats, it works like a charm. The browser parses the text as CSS, and links in into the live cascade.&lt;/p&gt;

&lt;p&gt;I mentioned caveats.. well, of course there are the obligatory cross-browser compatibility issues to be aware of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Internet Explorer, you can't just append a Text Node to a Style element, you have to use some trickery to get it to work.&lt;/li&gt;
  &lt;li&gt;KHTML &amp;amp; Safari do not honor &lt;code&gt;&lt;style&gt;&lt;/code&gt; elements that are not contained in the HEAD element of the document.&lt;/li&gt;
  &lt;li&gt;While IE and Mozilla always create a HEAD element for you if one doesn't exist, Opera and KHTML do not.&lt;/li&gt;
  &lt;li&gt;While Opera will honor a dynamically created HEAD element, KHTML will not. (That's a bug in KHTML as far as I'm concerned as it violates the DHTML principle that I've been talking about.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All in all, they're nothing to worry about and do not stand in the way of the fundamental technique. I've created a &lt;a href=&quot;/bitbucket/live-stylesheet.html&quot;&gt;demo page&lt;/a&gt; showing this code in action. As a nice side effect, it works as quick way of playing around with CSS properties and how they effect the styling of elements.&lt;/p&gt;

&lt;p&gt;Here is the source snippet implementing the technique I've described here:&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
   var style = document.createElement('style')
   style.setAttribute('type', 'text/css')

   var cssText = $('cssText').value
   if (style.styleSheet) { //IE only
      style.styleSheet.cssText = cssText
   } else {
      //for some reason this fails in IE.
      var text = document.createTextNode(cssText)
      style.appendChild(text)
   }
&lt;/code&gt;</body>
        <teaser>&lt;p&gt;Even after working with DTML for over a year, I'm still constantly astounded by how &lt;em&gt;dynamic it actually is&lt;/em&gt;. The most important thing to keep in the back of your head as a DHTML programmer is that the same mechanisms used by the browser to build an HTML document at load time are available to your in-page scripts. So, really, the static loading of your pages when you access a url is just the HTML parser invoking the same methods on the same objects that are available to your javascript code.&lt;/p&gt;</teaser>
        <timestamp>1153014102</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>63</nid>
        <vid>71</vid>
        <uid>4</uid>
        <title>Patiently waiting for JavaFX Script</title>
        <body>About a year ago, SUN announced a &quot;new&quot; platform for developing embeddable applications on the web, and they called this platform JavaFX. In reality, this new platform seems to me less of an innovation and more of a rehabilitation of the applet infrastructure which they allowed to languish over the last decade. 

That's not a criticism, it's a compliment. I'm happy that they're going to give applets another go. Heck, I'm even glad they're calling it JavaFX too. &quot;Applet&quot; always sounded too effete anyway. In any case I've always like the applet model, and wished it were a more viable option for web development. Given the success of Flex, which also uses the applet model, other people must feel this way too.

But I digress.

As far as I can tell (I've only been able to get my hands on some demos and a little open source compiler) JavaFX involves upgrading some of the more boorish aspects of the  java browser plugin. To name a few: faster download and initialization of application and JRE code, tighter integration and communication with the rest of the DOM, modern video and audio codecs.... All those are necessary upgrades to ensure the viability of the platform, but they can hardly be called innovative

That said, one new and curious aspect of JavaFX is that it will (for the most part) &lt;em&gt;not&lt;/em&gt; be written in Java. Instead, SUN is promoting a completely new and aptly named scripting language: JavaFX script.

Of all the new features it was the specification of this language that impressed me most. I'm not sure how this little gem of a language managed to come out of SUN, but it's absolutely loaded with modern language features to make programming in it clear and concise.

I'm talking about 
&lt;ul&gt;
&lt;li&gt;closures&lt;/li&gt;
&lt;li&gt;pure functions&lt;/li&gt;
&lt;li&gt;lazy evaluation&lt;/li&gt;
&lt;li&gt;list comprehensions (that put ruby's to shame)&lt;/li&gt;
&lt;li&gt;optional declarative syntax&lt;/li&gt;
&lt;li&gt;rolled in query language for searching and modifying data structures&lt;/li&gt;
&lt;li&gt;data binding supported at the language level&lt;/li&gt;
&lt;li&gt;tons of stuff I'm sure I don't even know about....&lt;/li&gt;
&lt;/ul&gt;

Overall it seems like JavaFX script is like 4 separate languages existing in harmony in one neat package, and as I read more and more about it, I kept thinking to myself &quot;This is not just some standard UI scripting language with a little sugar and a few extra hooks for writing GUIs. This is positively &lt;em&gt;avante-garde&lt;/em&gt;.

I like the idea that SUN can challenge their developers to think in new ways, but I can also imagine a backlash, or more mildly put, an general aversion in the developer community, since this is not any old language research project, but the centerpiece in SUN's product in the battle over the browser VM.

So where did this decision come from to go with such a departure from the norm when it came to defining JavaFX script? I like it alot, but I worry that SUN is going to chicken out, and go with something a little less sexy but a little more digestible (at least in the short term) to its current developers as well as the developers of competing platforms like Adobe Flex or Microsoft Silverlight.</body>
        <teaser>Upon closer inspection, the new language being promoted by SUN to develop for the embeddable web, JavaFX Script, is much more than meets the eye. I wonder why the abrupt departure from their habitually conservative stance when it comes to language features.</teaser>
        <timestamp>1212682925</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>41</nid>
        <vid>47</vid>
        <uid>9</uid>
        <title>Download Available?</title>
        <body>I was just wondering if there is a download available? If so, I couldn't find it.

Thanks,
John</body>
        <teaser></teaser>
        <timestamp>1151807613</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>56</nid>
        <vid>62</vid>
        <uid>2</uid>
        <title>Crosscheck Browserless Testing Framework</title>
        <body>&lt;div id=&quot;cc-logo&quot;&gt;
&lt;img src=&quot;/images/crosscheck.png&quot; alt=&quot;Crosscheck&quot; width=&quot;166&quot; height=&quot;73&quot;/&gt;
&lt;/div&gt;

&lt;div id=&quot;cc-blurb&quot;&gt;
&lt;img src=&quot;/images/cc-blurb.png&quot; alt=&quot;Crosscheck Blurb&quot;/&gt;
&lt;/div&gt;

&lt;br class=&quot;clear&quot;/&gt;

&lt;div id=&quot;cc-menu&quot;&gt;
&lt;h3&gt;Crosscheck Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=169197&quot; title=&quot;Download Crosscheck from Sourceforge&quot;&gt;Download Crosscheck Now!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/trac/crosscheck&quot; title=&quot;Crosscheck Development Site&quot;&gt;Crosscheck Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/trac/crosscheck/newticket?type=defect&quot; title=&quot;Create a defect ticket on Trac&quot;&gt;Report a Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/trac/crosscheck/newticket?type=enhancement&quot; title=&quot;Request a feature on Trac&quot;&gt;Request a Feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/crosscheck&quot; title=&quot;Crosscheck Google Group&quot;&gt;Join the Crosscheck Discussion Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;irc://irc.freenode.net#crosscheck&quot; title=&quot;Crosscheck IRC Channel&quot;&gt;Support/Chat on IRC (#crosscheck)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.&lt;/p&gt;

&lt;p&gt;Because of its unique approach, Crosscheck has many advantages over other testing frameworks that are confined to running inside an actual browser:&lt;/p&gt;

&lt;h4&gt;Truly Cross Platform&lt;/h4&gt;
&lt;p&gt;Crosscheck is implemented in 100% pure Java, and &lt;em&gt;does not require a web browser at all&lt;/em&gt;. That means it, and tests authored with it, will run anywhere Java runs. So tests targeting Internet Explorer will run just as well on Windows, Linux, and OSX. Developers can test their code against browsers that may not be available on their platform  (IE on the Mac, Safari on Windows, etc...)&lt;/p&gt;

&lt;h4&gt;Simple Java API&lt;/h4&gt;
&lt;p&gt;Crosscheck tests can be controlled entirely via a &lt;a href=&quot;http://www.thefrontside.net/docs/java/crosscheck/index.html&quot;&gt;programatic api&lt;/a&gt; for configuring, initiating, and reporting the results of tests &lt;em&gt;as they happen&lt;/em&gt;. This allows complete control of when and how you initiate tests, as well as the format in which you report results. It could be to a GUI, a text-based console, or even to a machine-readable format such as XML.&lt;/p&gt;

&lt;p&gt;This powerful capability also opens the possibility to extend developement tools such as Ant, Eclipse and IntelliJ to quickly run cross browser tests without the nightmare of trying to instantiate and collect results from a browser.&lt;/p&gt;

&lt;h4&gt;Fully Automatable&lt;/h4&gt;
&lt;p&gt;Because crosscheck requires nothing more than a JVM, you can automate your tests to run anywhere, anytime, on any platform without human intervention. For example, crosscheck can be used to test multi-browser code on a continuous integration server that &lt;em&gt;doesn't even have a display!&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Speed, Speed, Speed&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;It is well known that the value of a test case increases dramatically as the time needed to run it drops&lt;/em&gt;. Crosscheck tests are fast because they require little to no human interaction to start and run, and because they do not incur the overhead of starting up one, let alone multiple browsers.&lt;/p&gt;
&lt;p&gt;Crosscheck can run hundreds of multi-browser tests in a matter of seconds, allowing you more time to develop, and less time nitpicking over browser incompatibilities.&lt;/p&gt;
&lt;/div&gt;
</body>
        <teaser>Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.</teaser>
        <timestamp>1156713836</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>32</nid>
        <vid>63</vid>
        <uid>1</uid>
        <title>Crosscheck Browserless Testing Framework</title>
        <body>&lt;div id=&quot;cc-logo&quot; class=&quot;left&quot;&gt;
&lt;img src=&quot;/images/crosscheck.png&quot; alt=&quot;Crosscheck&quot; width=&quot;166&quot; height=&quot;73&quot;/&gt;
&lt;/div&gt;

&lt;div id=&quot;cc-blurb&quot; class=&quot;right&quot;&gt;
&lt;img src=&quot;/images/cc-blurb.png&quot; alt=&quot;Crosscheck Blurb&quot;/&gt;
&lt;/div&gt;

&lt;div class=&quot;clear&quot;&gt;&lt;/div&gt;

&lt;div id=&quot;cc-menu&quot; class=&quot;right&quot;&gt;
&lt;h3&gt;Crosscheck Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://sourceforge.net/project/showfiles.php?group_id=169197&quot; title=&quot;Download Crosscheck from Sourceforge&quot;&gt;Download Crosscheck Now!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/crosscheck&quot; title=&quot;Crosscheck Development Site&quot;&gt;Crosscheck Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/crosscheck/newticket?type=defect&quot; title=&quot;Create a defect ticket on Trac&quot;&gt;Report a Bug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.thefrontside.net/crosscheck/newticket?type=enhancement&quot; title=&quot;Request a feature on Trac&quot;&gt;Request a Feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://groups.google.com/group/crosscheck&quot; title=&quot;Crosscheck Google Group&quot;&gt;Join the Crosscheck Discussion Group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;irc://irc.freenode.net#crosscheck&quot; title=&quot;Crosscheck IRC Channel&quot;&gt;Support/Chat on IRC (#crosscheck)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.&lt;/p&gt;

&lt;p&gt;Because of its unique approach, Crosscheck has many advantages over other testing frameworks that are confined to running inside an actual browser:&lt;/p&gt;

&lt;h4&gt;Truly Cross Platform&lt;/h4&gt;
&lt;p&gt;Crosscheck is implemented in 100% pure Java, and &lt;em&gt;does not require a web browser at all&lt;/em&gt;. That means it, and tests authored with it, will run anywhere Java runs. So tests targeting Internet Explorer will run just as well on Windows, Linux, and OSX. Developers can test their code against browsers that may not be available on their platform  (IE on the Mac, Safari on Windows, etc...)&lt;/p&gt;

&lt;h4&gt;Test Indepence&lt;/h4&gt;

&lt;p&gt;A difficult and unavoidable problem which plagues in-browser tests is that the host environment(window, document, etc...) is initialized only once, resulting in an implicit &lt;a href=&quot;http://xunitpatterns.com/Shared%20Fixture.html&quot;&gt;shared fixture&lt;/a&gt;, which, if care is not taken to propertly tear down after each test, can easily result in &lt;a href=&quot;http://xunitpatterns.com/Erratic%20Test.html&quot;&gt;erratic tests&lt;/a&gt;. Crosscheck provides a fresh browser environment for each testcase, so that each test is isolated from every other.&lt;/p&gt;

&lt;h4&gt;Simple Java API&lt;/h4&gt;
&lt;p&gt;Crosscheck tests can be controlled entirely via a &lt;a href=&quot;http://www.thefrontside.net/docs/java/crosscheck/index.html&quot;&gt;programatic api&lt;/a&gt; for configuring, initiating, and reporting the results of tests &lt;em&gt;as they happen&lt;/em&gt;. This allows complete control of when and how you initiate tests, as well as the format in which you report results. It could be to a GUI, a text-based console, or even to a machine-readable format such as XML.&lt;/p&gt;

&lt;p&gt;This powerful capability also opens the possibility to extend developement tools such as Ant, Eclipse and IntelliJ to quickly run cross browser tests without the nightmare of trying to instantiate and collect results from a browser.&lt;/p&gt;

&lt;h4&gt;Fully Automatable&lt;/h4&gt;
&lt;p&gt;Because crosscheck requires nothing more than a JVM, you can automate your tests to run anywhere, anytime, on any platform without human intervention. For example, crosscheck can be used to test multi-browser code on a continuous integration server that &lt;em&gt;doesn't even have a display!&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Speed, Speed, Speed&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;It is well known that the value of a test case increases dramatically as the time needed to run it drops&lt;/em&gt;. Crosscheck tests are fast because they require little to no human interaction to start and run, and because they do not incur the overhead of starting up one, let alone multiple browsers.&lt;/p&gt;
&lt;p&gt;Crosscheck can run hundreds of multi-browser tests in a matter of seconds, allowing you more time to develop, and less time nitpicking over browser incompatibilities.&lt;/p&gt;
&lt;/div&gt;
</body>
        <teaser>Crosscheck is an open source testing framework for verifying your in-browser javascript. It helps you ensure that your code will run in many different browsers such as &lt;a href='http://www.microsoft.com/windows/ie/ie6/default.mspx'&gt;Internet Explorer&lt;/a&gt; and &lt;a href='http://www.mozilla.com/firefox'&gt;Firefox&lt;/a&gt;, but &lt;em&gt;without needing installations of those browsers&lt;/em&gt;. The only thing you need is a Java Virtual Machine.</teaser>
        <timestamp>1181365403</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>57</nid>
        <vid>64</vid>
        <uid>2</uid>
        <title>Crosscheck Site Gets an Overhaul with Developers Specially in Mind</title>
        <body>&lt;p&gt;As it stood, the Crosscheck website wasn't accessible enough to developers with questions and problems about the framework. To address this, we completely reorganized the website with developers (like all of us) in mind.&lt;/p&gt; 

&lt;p&gt;We replaced the forums with a &lt;a href=&quot;http://groups.google.com/group/crosscheck&quot;&gt;google discussion group&lt;/a&gt; for getting easier feedback when someone responds to your inquiry. We created an &lt;a href=&quot;irc://irc.freenode.net#crosscheck&quot;&gt;irc channel&lt;/a&gt; devoted to crosscheck discussion so that you can air your questions and concerns &lt;em&gt;in the inimitable right now&lt;/em&gt;. And finally, we erected an &lt;a href=&quot;http://dev.thefrontside.net/crosscheck&quot;&gt;entire website devoted to Crosscheck development&lt;/a&gt; complete with documentation, wiki, and transparent issue tracking.&lt;/p&gt;

&lt;p&gt;We're trying to make &lt;a href=&quot;http://www.thefrontside.net/crosscheck&quot;&gt;Crosscheck&lt;/a&gt; as open and accessible for you, the developer, as we possibly can. So drop by, check it out, and help us help you!</body>
        <teaser>&lt;p&gt;As it stood, the Crosscheck website wasn't accessible enough to developers with questions and problems about the framework. To address this, we completely reorganized the website with developers (like all of us) in mind.&lt;/p&gt; </teaser>
        <timestamp>1156717895</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>58</nid>
        <vid>65</vid>
        <uid>4</uid>
        <title>The Good and the Ugly of Scriptaculous Behavior Driven Testing Style.</title>
        <body>&lt;p&gt;There's a lot of interesting and compelling features in the experimental &quot;Behavior Driven&quot; extentions to the &lt;a href=&quot;http://dev.rubyonrails.org/browser/spinoffs/scriptaculous/src/unittest.js&quot;&gt;Scriptaculous Unit Testing Framework&lt;/a&gt;. I'd like to see some of them incorporated into Crosscheck, but others... well, not so much.&lt;/p&gt;
&lt;!--break--&gt;
&lt;p&gt;When I contrast &lt;a href=&quot;http://www.thefrontside.net/crosscheck&quot;&gt;Crosscheck&lt;/a&gt; and the Scriptactulous Unit Testing framework, or SUT from here on out, the comparison is only skin deep. The SUT consists only of a testing API, so if your intent is to test code's interaction with a browser, then you have to run it &lt;em&gt;inside a browser&lt;/em&gt;. Crosscheck on the other hand provides both a testing API &lt;em&gt;and&lt;/em&gt; a &lt;a href=&quot;http://dev.thefrontside.net/crosscheck/wiki/SupportedHosts&quot;&gt;suite of simulated browser environments&lt;/a&gt;, and so it cannot be run in an &lt;em&gt;actual&lt;/em&gt; browser. Where and how you would use them are completely different; each with its &lt;a href=&quot;http://dev.thefrontside.net/crosscheck/wiki/Overview&quot;&gt;pros&lt;/a&gt; and &lt;a href=&quot;http://dev.thefrontside.net/crosscheck/wiki/Cons&quot;&gt;cons&lt;/a&gt;, but I won't discuss that here. I'm just talking about the differences in the &lt;em&gt;style&lt;/em&gt; of the testing API itself&lt;/p&gt;

&lt;h4&gt;The Good&lt;/h4&gt;

&lt;p&gt;Let's start with an example of the SUT in action:&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
Test.context(&quot;Behavior Driven Assertions&quot;,{
   'objects know how to compare other objects against themselves': function() {
      'one'.shouldEqual('one');
      'one'.shouldNotEqual('two');
 }
})
&lt;/code&gt;
&lt;p&gt; The analogous crosscheck code, which uses the more classical assertion style:&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
crosscheck.addSuite(&quot;Classic Assertions&quot;, {
   test_assertions_in_classic_form: function() {
      assertEquals('one', 'one')
      assertNotEquals('one', 'two')
   }
})
&lt;/code&gt;

&lt;p&gt;For starters, I find the SUT style of naming tests with a free-form string to be very attractive. Notice how the test name sets itself apart from the rest of the code. There aren't any of those irritating underscores to interfere with the test cases name. It's such a small thing, but it does alot to convey the meaning of the code. Though it hadn't occured to me to use it as our convention, a similar effect can be achieved in Crosscheck.&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
crosscheck.addSuite(&quot;Alternate Test Naming Style&quot;, {
   'test assertions in classic form': function() {
      assertEqual('one', 'one')
      assertNotEqual('two', 'two')
   }
})
&lt;/code&gt;

&lt;p&gt;This works because all crosscheck does is look for functions whose names start with the string &quot;test.&quot; The rest of the string isn't important, so this works without changing anything. This does, however, highlight another subtle difference between the two: SUT doesn't even have the restriction of beginning your test functions with &quot;test&quot;! Once again, I find this style very attractive. Those who know me know that I loath repetition (example: I despise using semi-colons in javascript except where needed), and so the opportunity to eliminate the repetition of needlessly prepending &quot;test&quot; in front of every test method is tempting.&lt;/p&gt;

&lt;p&gt;As much as I like it, this one isn't without it's drawbacks. The problem is, if you allow &lt;em&gt;any&lt;/em&gt; string to indicate a test, then how do you determine which methods are test methods, and which are plain vanilla methods of the testcase itself? In our tests, we frequently use instance methods to provide helper functions or custom assertions to the specific testcase&lt;/p&gt;

Example:
&lt;code type=&quot;javascript&quot;&gt;
crosscheck.addSuite(&quot;Differentiating Test Cases&quot;, {
   'any string can be a test name': function() {
      this.assertValidTestName(this.name) //-&gt; in crosscheck all test cases have 'name' property
   },

   assertValidTestName: function(name) {
      assertEquals('string', typeof name)
   }
})
&lt;/code&gt;

&lt;p&gt;The above has an obvious flaw. How can the framework determine that &quot;any string can be a test name&quot; &lt;em&gt;is&lt;/em&gt; a test method, but that &quot;assertValidTestName&quot; &lt;em&gt;is not&lt;/em&gt;. It could check for function properties that have interlaced whitespace, but then what about test cases that are just a single word? The heuristics for what's a testcase and what isn't soon become complex and altogether too sketchy for my taste. The only solution I see is to wrap the testcases in their own scope so that they are completely disambiguated from the rest of the test class:&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
crosscheck.addSuite(&quot;Disambiguated Test Space&quot;, {
   tests: {
     'any string can be a test name': function() {
        this.assertValidTestName(this.name)
     }
   },
   assertValidTestName: function(name) {
      assertEquals('string', typeof name)
   }
})
&lt;/code&gt;
&lt;p&gt;I have mixed feelings about this one. While the free-form naming of tests make them stand out, it comes at the cost of another level of indentation and &quot;curly clutter&quot; which cuts into the gains to be had therein. Unless I'm missing something, to seperate the name spaces, SUT &lt;em&gt;must&lt;/em&gt; employ some strategy like this, or else forbid any functions on a testcase other than test definitions (ick!).&lt;/p&gt;

&lt;p&gt;But it isn't just &lt;em&gt;how&lt;/em&gt; you collect tests. That's thinking from the framework's perspective. The whole point of what they're trying to do with these SUT extensions(I think) is to make the tests read like an &lt;em&gt;expectation of how the code under test should behave&lt;/em&gt;&lt;/p&gt;

Let's look at that first SUT snippet again:
&lt;code type=&quot;javascript&quot;&gt;
Test.context(&quot;Behavior Driven Assertions&quot;,{
   'objects know how to compare other objects against themselves': function() {
      'one'.shouldEqual('one');
      'one'.shouldNotEqual('two');
   }
})
&lt;/code&gt;

&lt;p&gt;The first time I looked at the SUT, I thought &lt;code type=&quot;javascript&quot;&gt;Test.context()&lt;/code&gt;?!? That's a weird, vague, and overused term. Everybody has a context, and right now my current context is &quot;What the hell are you talking about?&quot; but after subsequent reading, and if I correctly divine the SUT authors' intent, they chose &lt;code&gt;context&lt;/code&gt;, because they want the testcase to read as a &lt;em&gt;statement&lt;/em&gt; to the effect that
&lt;blockquote&gt;&lt;em&gt;
In the &lt;strong&gt;context&lt;/strong&gt; of &lt;strong&gt;Behavior Driven Assertions&lt;/strong&gt;, &lt;strong&gt;objects know how to compare other objects against themselves&lt;/strong&gt;.
&lt;/em&gt;&lt;/blockquote&gt;
&lt;/p&gt;

&lt;p&gt;The compelling principle here is that the mechanics of test assembly are subordinate to expressing the &lt;em&gt;semantic significance&lt;/em&gt; which the test implies. By comparison, &lt;code&gt;crosscheck.addSuite() &lt;/code&gt; seems to tell you more about how the tests are constructed and organized than what they mean.&lt;/p&gt;
&lt;p&gt;Perhaps we can apply this principle to the problem of how to differentiate test functions from plain-vanilla function by choosing an &quot;expressive&quot; namespace&lt;/p&gt;

&lt;code type=&quot;javascript&quot;&gt;
Test.context(&quot;Behavior Driven Assertions&quot;,{
   'such that': {
      'objects know how to compare other objects against themselves': function() {
         'one'.shouldEqual('one');
         'one'.shouldNotEqual('two');
      }
   },
   'assuming': function() { //-&gt; this becomes the setup function
     //create the test fixture
   },

   //normal methods go here.
   
})
&lt;/code&gt;

&lt;p&gt;Perhaps the choice of words could be better, but you get the picture. Which leads us to the question: does anyone besides test framework authors such as myself and those of the SUT give half a rat's ass about the form that they're tests take? Unless they want to try and document their code via the tests (a laudable goal, but one which I've yet to see realized effectively) people are, in all probability, more interested in the mechanics of test assembly rather than the semantic implications of the tests themselves. I.e. &quot;huh? so what functions actually gets run when I run the test, and when?&quot; That said, I see no reason that both styles can't peacefully coexist inside the same framework.&lt;/p&gt;

&lt;h4&gt;The Ugly&lt;/h4&gt;

&lt;p&gt;While I found much of value in the behavior driven SUT style, I did find one aspect of it extremely distasteful: the addition of assertion methods to the base objects themselves. I concede that it has a &lt;em&gt;slight&lt;/em&gt; edge on relaying intent, but the negative consequences far outweigh the minimal gains in readability. Extending the builtin prototypes in application code is a dubious practice at best and considered an &lt;a href=&quot;http://erik.eae.net/archives/2005/06/06/22.13.54/&quot;&gt;abuse&lt;/a&gt; &lt;a href=&quot;http://blog.metawrap.com/blog/WhyIDontUseThePrototypejsJavaScriptLibrary.aspx&quot;&gt;by&lt;/a&gt; &lt;a href=&quot;http://www.webdeveloper.com/forum/showthread.php?t=60187&amp;goto=nextoldest&quot;&gt;many&lt;/a&gt;, but for a testing framework it is indefensible. It is simply &lt;em&gt;beyond its charter&lt;/em&gt; to bemerd the core objects with its own functions. Period. It's hard enough as it is to get different javascript libraries to live together peacefully in the ring without your testing framework leaping in and swinging wildly.&lt;/p&gt;

&lt;p&gt;Let's be real here.&lt;/p&gt;
&lt;code type=&quot;javascript&quot;&gt;
'one'.shouldEqual('two')
assertEquals('one', 'two')
&lt;/code&gt;
&lt;p&gt;Those two ways of saying the same thing just aren't different enough to warrant the potential nightmares for framework users. Of course, it could be argued that seeing the assertions written in that style was key to reorienting my view of the tests from how they're constructed to what they mean, but if that's your vantage point from the get-go, I don't see those type of assertions as a major requirement.&lt;/p&gt;

&lt;h4&gt;Jeez, What a Long Post&lt;/h4&gt;

How these reflections will affect Crosscheck remain to be seen. The goal as I see it, is to align what a test &lt;em&gt;does&lt;/em&gt; and what a test &lt;em&gt;says&lt;/em&gt; within the same set of statements. It will always require trade-offs but let's all keep pushing our testing techniques forward. It's a big world out there beyond jUnit.</body>
        <teaser>&lt;p&gt;There's a lot of interesting and compelling features in the experimental &quot;Behavior Driven&quot; extentions to the &lt;a href=&quot;http://dev.rubyonrails.org/browser/spinoffs/scriptaculous/src/unittest.js&quot;&gt;Scriptaculous Unit Testing Framework&lt;/a&gt;. I'd like to see some of them incorporated into Crosscheck, but others... well, not so much.&lt;/p&gt;
</teaser>
        <timestamp>1157581074</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>1</nid>
        <vid>66</vid>
        <uid>1</uid>
        <title>Home</title>
        <body>&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; id=&quot;grabber&quot;&gt;&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;images/main.jpg&quot; height=&quot;247&quot; width=&quot;293&quot; alt=&quot;Troll Nut&quot;/&gt;&lt;/td&gt;
    &lt;td class=&quot;midcontent&quot;&gt;
      &lt;h1&gt;Vibrant Web Interfaces. Deep Server Integration&lt;/h1&gt;
      &lt;p&gt;At The FrontSide we harness the latest in web interface technologies such as AJAX and Comet to make web application content come alive. We employ a &lt;a href='freestyle'&gt;cleaner, more humble&lt;/a&gt; approach to UI design that favors custom interactive content over heavy and inflexible widgets, while at the same time allowing seamless integration with server systems in Java, .Net, and Ruby.&lt;/p&gt;
      &lt;p&gt;Our skill and &lt;a href='crosscheck'&gt;leadership&lt;/a&gt; in developing agile, enterprise-class applications sets us apart, and ensures that our customers not only get the job done, but get it done right.&lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;!--break--&gt;</body>
        <teaser>&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot; id=&quot;grabber&quot;&gt;&lt;tbody&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;img src=&quot;images/main.jpg&quot; height=&quot;247&quot; width=&quot;293&quot; alt=&quot;Troll Nut&quot;/&gt;&lt;/td&gt;
    &lt;td class=&quot;midcontent&quot;&gt;
      &lt;h1&gt;Vibrant Web Interfaces. Deep Server Integration&lt;/h1&gt;
      &lt;p&gt;At The FrontSide we harness the latest in web interface technologies such as AJAX and Comet to make web application content come alive. We employ a &lt;a href='freestyle'&gt;cleaner, more humble&lt;/a&gt; approach to UI design that favors custom interactive content over heavy and inflexible widgets, while at the same time allowing seamless integration with server systems in Java, .Net, and Ruby.&lt;/p&gt;
      &lt;p&gt;Our skill and &lt;a href='crosscheck'&gt;leadership&lt;/a&gt; in developing agile, enterprise-class applications sets us apart, and ensures that our customers not only get the job done, but get it done right.&lt;/p&gt;
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</teaser>
        <timestamp>1181328877</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>61</nid>
        <vid>69</vid>
        <uid>1</uid>
        <title>The Chicken and the Vine: Trans-Global Pair Programming</title>
        <body>&lt;p&gt;The Frontside Software is a three person company with &quot;offices&quot; in Michigan, Finland, Massachusetts, and New Jersey. We're don't see each other every day, and we're rarely in the same room, but we still do a significant portion of our development work in pairs. Despite many other competing setups, we still do this with the not-so-new, not-so-exciting, yet extremely flexible and reliable &lt;a href=&quot;http://www.realvnc.com/what.html&quot; title=&quot;Real VNC&quot;&gt;VNC&lt;/a&gt; combined with a voip product like &lt;a href=&quot;http://skype.com&quot; title=&quot;Skype VOIP&quot;&gt;skype&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;One of us (the driver) runs a vnc server which transmits everything that is rendered on his display to one or more vnc clients (passengers) being run by the other half of the pair. That way, the client can see everything that goes on while the driver is coding, including  his code editor, his web browser, his terminal windows, etc... Meanwhile, you've got real-time audio so that you can talk about the work you're doing as you're doing it.&lt;/p&gt;

&lt;h3&gt;Is there something better?&lt;/h3&gt;
&lt;p&gt;Not yet. We've seen some new collaborative coding tools like &lt;a href=
&quot;http://www.codingmonkeys.de/subethaedit/&quot; title=&quot;SubEthaEdit Site&quot;&gt;SubEthaEdit&lt;/a&gt; and &lt;a href=&quot;http://gobby.0x539.de/trac/&quot; title=&quot;Gobby Trac Site&quot;&gt;Gobby&lt;/a&gt; come down with some very slick features. Specifically, the updating and syncing of editor state between the two machines is very fast, and effectively coordinates multiple people editing the same document, with as few clashes as possible. The way in which they do this is impressive, but after having given it several abortive attempts as a real solution for remote pair programming, we went back to good old VNC. Here's why:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Lack of editing features:&lt;/strong&gt; The collaborative editors of today are good at one thing: editing text collaboratively. The problem is that when you're pair-programming, you're not editing text, you're editing code, and code is only a simple sequence of text to a computer. There are lots of editors these days that leverage the semantically rich structure of the documents on which they operate like TextMate, Emacs, Eclipse.... everybody has a favorite, and because your collaborative editor is not your favorite, that means it sucks ;-)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lack of environment:&lt;/strong&gt; Of course, there are a scant few collaborative editing plug-ins for existing IDEs which would seem to address this problem, but adding on another layer, development is about more than just coding. It's about browsing documentation, running servers, invoking build scripts from the command line, and about a million other tiny tasks. In effect, your &lt;em&gt;actual&lt;/em&gt; IDE is not just one application, it's your whole computer, and if the only thing being shared is a single app, then it cuts your pair out of a lot of important context. With VNC, everybody sees what's going on all the time. They can see not only the code, but also the running program.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Editing the same document at the same time isn't really helpful anyway&lt;/strong&gt;: If you've done much pair-programming, then you realize that the real value doesn't come from having two sets of fingers on the keyboard at the same time. In fact quite the opposite: Both participants are following the thread of development, but one of them is freed entirely from the act of coding so that they can think about high-level architectural issues, or lookup api docs, or google for resources --all in parallel. Having both people pounding on the keyboard actually hinders this dynamic.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VNC is cross platform&lt;/strong&gt;: This is a biggie. There are vnc clients and servers for Windows, OSX, and Linux (we code on all three), and they all interoperate with each other. That's a pretty hard feature to top, especially for single-platform apps like SubEthaEdit and Gobby which run on OSX and Linux respectively.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;About the only drawback to pair programming with VNC is that there can be some fairly significant lag (between 1-4 seconds) depending on network load on either end, but even so, when it comes to &lt;em&gt;actually&lt;/em&gt; developing collaboratively, VNC and Skype are our daily tools of choice.&lt;/p&gt;

&lt;h3&gt;VNC Clients/servers&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;OSX client&lt;/strong&gt;: &lt;a href=&quot;http://sourceforge.net/projects/cotvnc/&quot; title=&quot;Chicken of the VNC&quot;&gt;Chicken of the VNC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OSX server&lt;/strong&gt;: &lt;a href=&quot;http://www.redstonesoftware.com/products/vine/server/vineosx/&quot; title=&quot;Vine Server&quot;&gt;Vine Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows/Linux client/server&lt;/strong&gt;: &lt;a href=&quot;http://www.tightvnc.com/download.html&quot; title=&quot;Tight VNC&quot;&gt;http://www.tightvnc.com/download.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</body>
        <teaser>&lt;p&gt;Pair-Programming, a popular member in the family of agile best practices, can be difficult to implement when the participants aren't even in the same country, much less the same room. Yet it's possible to do it effectively, and the tools we use to do it every day are robust, cross platform, and best of all, completely free.&lt;/p&gt;</teaser>
        <timestamp>1181365634</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>59</nid>
        <vid>67</vid>
        <uid>2</uid>
        <title>When Using Mod Rewrite, Remember That The Version Counts</title>
        <body>Pro Tip: Which regular expressions work depends on the version of Apache/mod_rewrite that you're using. I recently tested the following rewrite rule on Apache2
&lt;code&gt;
RewriteRule ^archives/(\d+).html http://www.thefrontside.net/map2new.php?$1 [R]
&lt;/code&gt;

I wanted to match files like archives/000532.html.

But when it came time to deploy, it didn't work. Turns out the environment I was deploying to was using a different version of Apache. That's bad practice of course, but aside from that, the little gotcha was that the regular expression interpreter was different in different versions of Apache, and in this case, its behavior differed not only from the newer version but also from the behavior of most regexp engine's out there. Specifically, the &quot;digit&quot; literal &lt;code&gt;\d&lt;/code&gt; is not understood by older versions (which interpret it as a literal &quot;d&quot;). 

Instead I had to use [0-9]

&lt;code&gt;
RewriteRule ^archives/([0-9]+).html http://www.thefrontside.net/map2new.php?$1 [R]
&lt;/code&gt;

This is a very specific nugget, but hopefully it will save someone a headache down the road. Just remember, if your mod_rewrite regexp isn't working, &lt;em&gt;check the specific version of the engine&lt;/em&gt;, and make sure your regexp is one that it will understand.</body>
        <teaser>A (very) brief note regular expressions in mod_rewrite across different versions.</teaser>
        <timestamp>1181585465</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>60</nid>
        <vid>68</vid>
        <uid>2</uid>
        <title>What can The Front Side do for me?</title>
        <body>&lt;p&gt;Do you want to develop a green-field application? Are you extending and enhancing existing systems? Or maybe you want to fine-tune and enhance your own development practices? Humble or ambitious, your needs vary, and the Front Side can help you meet them with high-quality, affordable software.&lt;/p&gt;

&lt;!--
&lt;p&gt;Do you have an idea that needs implementation &lt;em&gt;and fast&lt;/em&gt;? Do you have an existing system that needs to be extended or debugged? Perhaps you want to learn how to do effective pair programming and test driven development by actually pairing with guys who develop that way all day. Whatever it is, we can write or help you to write elegant, affordable software &lt;em&gt;that works&lt;/em&gt;.&lt;/p&gt;
--&gt;

&lt;p&gt;The Front Side team are skilled in writing frontends in a diverse set of technologies from Ajax to Swing and back-ends in .Net, Java, and Ruby. More important than any particular silo or layer, we have both helped and brought complete solutions to market and help you achieve the same success for your projects and products.&lt;/p&gt;

&lt;h3&gt;Talk is cheap&lt;/h3&gt;

&lt;p&gt;Of course everyone &lt;em&gt;thinks&lt;/em&gt; that they're as good as they say they are, but how do you tell the difference? Even for those with strong technical backgrounds, it can be difficult to tell if a developer is a diamond or a dud, so how can you know if that you're going to &lt;em&gt;get what you want&lt;/em&gt; instead of wasting your money. The best way to  see if the Front Side works for you is to try us out for free.&lt;/p&gt;

&lt;p&gt;You download trial software all the time. Why should seeking software services be any different? &lt;a href=&quot;mailto:information@thefrontside.net&quot;&gt;Drop us a line&lt;/a&gt;, &lt;a href=&quot;/contact&quot;&gt;contact us through this site&lt;/a&gt;, or chat with us&lt;a href=&quot;irc://irc.freenode.net/frontside&quot; title=&quot;Freenode IRC Channel&quot;&gt; live on irc&lt;/a&gt; to see what we can do for you. If we can help you we will, and if you aren't completely satisfied with what you get, we won't charge you a thing for it.&lt;/p&gt;
</body>
        <teaser></teaser>
        <timestamp>1182000199</timestamp>
        <format>3</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>65</nid>
        <vid>73</vid>
        <uid>4</uid>
        <title>Frontside Flex Skills Perfected!</title>
        <body>This isn't meant to be a comparison of html/css/javascript to flex. That would be akin to bringing the 17th mac n' cheese casserole to the neighborhood potluck.

I may be late to the party, but there were some refreshing things about developing in flex that weren't part of the official pitch that folks might be interested in. Specifically, I was very impressed by the ubiquitous support for vector graphics in the flash runtime.

You don't have to know a lot about graphics in general to appreciate this: using vector graphics makes implementing more flexible user interfaces a &lt;strong&gt;heck-of-a-lot&lt;/strong&gt; easier. And when I say heck-of-a-lot, I mean a &lt;em&gt;whole&lt;/em&gt; heck-of-alot (as in non-fractional). The reason for this is simple: vector graphics can be rendered at any size, and still look the same.

One of my least favorite activities in HTML is making workaday components like buttons, tabs, headers more graphically spicy. It's a necessary task, but assembling them takes time, and they're always brittle. There's usually several contexts in which you place them where they don't look right, or require some tweaking, and worst of all, they're almost never resizeable along both the X and Y axis. That's because the gradients, borders, and images on cross browser HTML components use raster graphics.

Like I said, the thing I found nicest with flex was that you can use vector graphics to skin components so that if the the scale of a component (or the scale of one of it's parents!) changes, so do all the backing graphics. That includes borders, gradients, hover-effects, you name it. All with absolutely no effort on you, the programmer's part.

That doesn't mean that you can't play with pixel data to your heart's content. After all, even vector images have to be rendered to a set of pixels so that they can be displayed on your screen.... and that's the best part, with it's component filtration system, flex gives you raw access to all of the pixels of your entire user interface &lt;em&gt;before&lt;/em&gt; they are actually painted onto the display. That means you can cut, displace, color, twist, swirl not just graphics, but your actual UI to your heart's content. Of course, you don't need to do all those things except once in a blue moon, but all the same, it's a comforting thought to know that it's there.

Mainly, the idea that you can scale and stretch components to the particular task at hand is the big time saver.

But, enough talk. A picture is worth a thousand words. Here is a little demonstration of what I'm talking about. &lt;a href=&quot;http://www.thefrontside.net/flex/MagnifyBracket.swf&quot; target=&quot;_blank&quot;&gt;This is my first Flex toy application&lt;/a&gt; which I built using only a text editor and the freely available flex SDK. It is an SVG image of a tournament bracket with buttons as the starting team names. As you can see, you can adjust the scale of the tournament bracket and everything, including background and buttons, scales accordingly.

To demonstrate the pixel data munging, I've overlayed it with a magnifying glass which displaces the pixels to produce the magnification effect. While it is in place, you can use the arrow keys to adjust the size and magnification of the glass itself.

Pretty neato, and very little code indeed!</body>
        <teaser>As a long-time html/css/javascript programmer I finally get around to getting my hands dirty with flex. I liked a lot of what I saw. Not least of which was the harmonious interplay between vector and raster graphics.</teaser>
        <timestamp>1214599496</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>66</nid>
        <vid>74</vid>
        <uid>4</uid>
        <title>Crosscheck Update: Cleaning House</title>
        <body>Written in Javascript by me in early 2005, and then rewritten by &lt;a href=&quot;http://www.thefrontside.net/user/wadsbone&quot;&gt;Jason&lt;/a&gt; in Java in 2006, there has not been much crosscheck hacking going on these last two years. The reasons for this are many and complex but the two most important are 1) The current crosscheck functionality is sufficient for our needs, and 2) we've been drawn off onto side projects and so haven't really spent much time enhancing the core framework.

Ironically, it has been during these past two years of inactivity that interest in Crosscheck has grown. This is a natural result of the mainstreaming of both Ajax and Javascript as a language. As use of these techniques matures, it's only logical that development should gravitate towards more disciplined techniques --And, it is the recent interest in Crosscheck which has made me realize how woefully inadequate it is for the mainstream.

If Crosscheck is to remain a viable solution, there are some changes that need to be made, and some big bones that need breaking and resetting. It's been a long time coming, but here are my thoughts on the matter.

&lt;strong&gt;A Return To Javascript&lt;/strong&gt;

When we first wrote Crosscheck, the target Javascript interpreter was the venerable Rhino 1.5R5. While this was (and is) a wonderful piece of software, it was slow and there were certain deficiencies in the language itself which made the test environment less robust. As a result, we ended up having to write significant amounts of Java code to work around these deficiencies and make the system more performant; as the amount of Java piled up, we finally decided to implement almost the entire thing in Java.

This brought some nice features to the table: complete isolation of test environments, fast test execution, and a higher fidelity runtime (more resembling an actual browser). Unfortunately, it brought with it a downside too, the biggest angle of which was that our system was implemented in Java, while most of our users were Javascript programmers. It was a big mistake to underestimate this cost, since our codebase was instantly opaque to 95% of the eyes that would be looking at it. We became a bottle neck to submitting patches, and community development slowed to a crawl.

Fast forward two years, and past the release of Rhino 1.7R1. 

Since the release of the Crosscheck Java implementation, rhino has steadily improved in its capability to the point where most of the issues which drove us to Java have been addressed

&lt;ol&gt;
 &lt;li&gt; Performance&lt;/li&gt; 
   The javascript engine itself is much faster in both the compilation and execution than it was 2 years ago. This alone will mitigate much of the problems with slowness we encountered back in the early days. Also, we now have the capability to compile the javascript code to generated java classes which can be stored on disk and immediately loaded and interpreted, which means that if we implement the bulk of Crosscheck in Javascript, it will still perform somewhat like compiled java.
 &lt;li&gt; Language Problems&lt;/li&gt;
  The latest Rhino allows you to define getters and setters for object properties which means that you can mimic browser functionality in javascript which could previously only be implemented in Java. For example:
&lt;code type=&quot;javascript&quot;&gt;
var div = document.createElement('div')
div.cssText = 'color: blue; border: 2px solid red;'
div.style.color //=&gt; 'blue'
div.style.border //=&gt; '2px solid red'

//the reverse is also true
div.style.color = 'green'
div.cssText //=&gt; 'color: green; border: 2px solid red;'
&lt;/code&gt;

could not be done in earlier releases, because there was no way to &quot;watch&quot; the cssText property and update the properties on the style objects accordingly. So, we had to do it in Java.
&lt;/ol&gt;

Most importantly, as I stated earlier, our community will be able to expand and be more self-sustaining if the bulk of Crosscheck is implemented in a language they understand.

That said, there are certain parts of Crosscheck that will remain in Java. Specifically the test runner and loader. This will allow us to keep on doing the things that make Crosscheck special (like true test isolation) while making it majority Javascript. 

&lt;strong&gt;Refactoring The Cross-Browser Aspect&lt;/strong&gt;

Crosscheck's &lt;em&gt;raison d'être&lt;/em&gt; is its ability to simulate different browser s. Unfortunately, its architecture for doing so is ad-hoc, and ultimately infeasible in the long term. In our innocence, we started by using inheritance to model browser incompatibilities, and, once embarked upon that path, did not want expend the necessary mental and physical energy to alter course.

It seems reasonable enough. You have a Mozilla 1.8 environment which inherits from mozilla 1.7 and behaves slightly differently. IE 6, which inherits from IE5, etc... After all, IE Events bubble, but don't capture, whereas mozilla events do. Both IE have the ActiveXObject constructor, but neither Mozilla browser does. Experience however, has shown that modelling it like this works in only the simplest cases. 

Things fall apart quickly when supposedly related browsers start differing wildly in certain aspects of their functionality. IE7 has many API changes (read bugfixes) that make it more compatible with other mainstream browsers. Its Crosscheck implementation should share much more code with other implementations like Firefox. But, since its ancestor (IE6) branched off from the Mozilla side of the tree along time ago, doing this is awkward. Compound that by the fact that IE7 in quirks mode behaves a lot more like IE6, and your inheritance strategy is completely unraveled.

That's why I propose something along the lines of pluggable behaviors to simulate browser differences. Each browser environment can then be defined as a nothing more than a collection of behaviors. This has several advantages:
&lt;ol&gt;
&lt;li&gt;Fine Grained Control&lt;/li&gt; Because each behavior can (theoretically) be specified independent of any other behavior, you can share 90%/50% or 0% of your implementation with any other browser. This should give us the flexibility we need to rapidly accomodate new browsers as they come.

&lt;li&gt;Behavior Cataloging&lt;/li&gt; Right now, browser differences are implemented as mish-mash of if statements, overrided methods, and subclassing of various objects in the system, so &lt;em&gt;where&lt;/em&gt; exactly the differences between browsers lie can be very difficult to discern. Have a look at the Crosscheck site. Where is the list of browser incompatibilities? If the differences themselves were properly encapsulated as the units of code-reuse, then we could generate that list programmatically by iterating through them.

&lt;li&gt;Error Diagnostics&lt;/li&gt; This last advantage is more conjecture on my part, but, if, for example, a certain behavior triggered an error, you might be able to label it with common reasons why it happened. That way, Crosscheck could not only help you detect that an error occured, but also help you determine why.
&lt;/ol&gt;

Of course, the behaviors themselves can inherit from each other or from other classes. That's their business, but they can be swapped in and swapped out as you like.

&lt;strong&gt;Better HTML Support&lt;/strong&gt;
Let's face it, Crosscheck's HTML support sucks. Any html you use has to be well-formed XHTML, it doesn't interpret any tags like &lt;code&gt;&lt;style&gt;&lt;/code&gt;, or &lt;code&gt;&lt;script&gt;&lt;/code&gt;, Forget about loading things off a real network, or iframes, or any number of dynamics related to the DOM itself.

We've got to get Crosscheck parsing and interpreting (as best it can) real HTML as it is found in the wild. While in my opinion this isn't really as necessary as most people think, it is nevertheless still necessary enough to be necessary. 
:-)

We've started in many different directions, but now it's time to &lt;a href=&quot;http://www.youtube.com/watch?v=u_G-_yIxKWI&amp;feature=related&quot;&gt;finish the fight&lt;/a&gt;


</body>
        <teaser>Crosscheck, The Frontside's browserless javascript unit-testing framework has languished recently under the limitations of its current architecture and its regime of piecemeal updates. If the project is to keep alive, it's time to iterate all those things.</teaser>
        <timestamp>1215719622</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>67</nid>
        <vid>75</vid>
        <uid>4</uid>
        <title>Crosscheck: We can't do it without you</title>
        <body>I wrote about the reasons that I think crosscheck has been languishing  
recently, and what things need to be done to revive it:

&lt;a href=&quot;http://www.thefrontside.net/blog/crosscheck-update-cleaning-house&quot;&gt;
http://www.thefrontside.net/blog/crosscheck-update-cleaning-house&lt;/a&gt;

Not only do I think we need to rewrite crosscheck the program, but I  
also think we need to rewrite crosscheck the community. In the same  
way, that we want to call out to the community for help design and  
build the runtime from the ground up, we want also to call out to the  
community about how better to organize the project itself.

Since we're starting essentially from scratch in both places, this is  
everybody's chance to get in on the ground floor and take an active  
part in shaping the code and the community. If you're present and  
following the growth of the program from the start, then from the very  
first day you'll be a crosscheck guru.... and that's the ultimate goal  
here, to have as many crosscheck experts as there can possibly be  
besides just Jason and me.

Of course, it's not just about the code, we need to rework our site,  
and our documentation, and that means suggestions about how it should  
look, and how it should be put together. We're all ears on that front  
to.

If you are interested in helping us out, please let me know. Just  
know, that if you have a suggestion for a design, or for a site, or  
for anything, be prepared to back it up with an implementation.

In this spirit, I've started a prototype for the next major version of  
crosscheck. You can view/checkout the sourcecode here:

&lt;a href=&quot;https://crosscheck.svn.sourceforge.net/svnroot/crosscheck/branches/back-to-javascript&quot;&gt;
https://crosscheck.svn.sourceforge.net/svnroot/crosscheck/branches/back-to-javascript&lt;/a&gt;


Remember, this is a very rough draft that I banged out in only a few  
days. However, in the spirit of openness, I wanted to release it to  
everybody so that they can understand it, work with it, and perhaps  
suggest modifications to it as soon as possible.

Specifically, it addresses several of the things that I laid out in my  
blog

1) mostly javascript. the majority of the implementation is in  
bootstrap.js

I'm pretty pleased with the way that this turned out. Being  
javascript, it's really concise, and takes about 300% less LOC that  
the equivalent java implementation. The most notable exception is the  
code that wraps the testcase run and catches errors and failures.  
Unfortunately that has to be in java in order to get to the stack.

Another thing that I'm liking about this is that the number of java  
classes is less intimidating than it was before. Because there are so  
many less, it's easier to see what the ones that are there mean.

2) all of the crosscheck javascript is pre-compiled inside the jar.

It took me a while to figure out how to do this since the rhino docs  
are (and have really always been) atrocious. They tell you how to  
compile, but not how to use the scripts that you've compiled. Anyway,  
the core engine and the assertions are now compiled to an optimized  
class file. We can do the same for any other scripts that come along.


What it does not do is the actual crosschecky stuff. While the concept  
of the host has been baked into the APIs, it doesn't actually do  
anything with it yet. That still needs to come... but I'll wait to do  
it together with those interested in helping out.

There are several bugs I'm sure. I can't quite figure out how to get a  
proper stack trace when there is an assertion failure, but hey! I  
wanted to throw it out there rather than wait for it to achieve a  
perfect state which will never happen.
</body>
        <teaser>As the effort to infuse new life into crosscheck continues, I introduce a prototype of the next generation crosscheck, while at the same time issuing a plee to the community to become more involved.</teaser>
        <timestamp>1216323148</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>68</nid>
        <vid>76</vid>
        <uid>4</uid>
        <title>The Linux Endgame</title>
        <body>I believe that most of us will be using Linux as our primary desktop operating system by 2015. 

This conviction of mine is not born so much by fail on the part of Microsoft, or by my recent annoyances with Apple, but by the simple reality that the Linux desktop is so rapidly increasing its mass of awesomeness. Beyond merely achieving parity with mainstream OSes, I see its current trajectory eclipsing and surpassing them over the next five years or so.

Personally, I've been using Linux on my own desktop since '95 when I first worked at FundsXpress, and as my laptop operating system since '98(The first laptop I ever owned, a Transmonde was crappy at linux. If you want to see something funny, ask &lt;a href=http://www.zanecorp.com/&quot;&gt;Zane&lt;/a&gt; about the now defunct Transmonde). Without making this into a history lesson, or sounding too much like a &lt;a href=&quot;http://www.youtube.com/watch?v=HSQeMBzHR0o&quot;&gt;Yorkshire Gentleman&lt;/a&gt;, the difficulties that came with using Linux back then are pretty much the same as they are now and can be divided into roughly three categories: Lack of applications, imperfect hardware support, and the catch all of &quot;usability&quot;. The only difference between now and then is that these gaps are rapidly closing and the rate at which they are doing so is accelerating. In some cases where there were gaps previously, there are rays of excellence showing through and exposing gaps in other environments.

The gaps of which I'm talking about were thrown into stark relief for me when I jumped on the OSX bandwagon back in 2006. I'd always dreamed of having that awesome unix workstation that looked good, but also had that sweet unix development environment that's so much of a pleasure to live and work with (In the foolishness of my youth, I thought that this would be centered around &lt;a href=&quot;http://enlightenment.org/&quot;&gt;enlightenment&lt;/a&gt;. Oh the follies of the young). OSX was the first time I felt this dream truly realized after having used Unix as my primary operating system for over 10 years. I can only describe the feeling as coming home after so much time in the wilderness. Not only was the operating system clean, efficient and sexy, but both mainstream and niche apps were to be had in abundance. Plus, I've never spent even one hot minute dicking around with drivers and configuration for my Apple hardware(when I was 19 years old, dicking around like this was actually a pleasure. Go figure.) From that point forward, OSX has set the bar for what a proper desktop can and should be.

Indeed, If I had had an extra testicle to spare I probably would have stuck with OSX when it came time to purchase a new laptop two months ago, but at the time I was under serious budgetary constraints, I desperately needed a laptop and a loaded Thinkpad for just over $1250 was a no-brainer when compared with $2900 for an equivalent MacbookPro. Even without the 20% off from Lenovo at my time of purchase, it would have been over $1000 cheaper. I'd be lying if I said that the $1700 price difference wasn't 99% of my decision (I literally could not afford to pay three grand for a Mac, no matter how freaking awesome it might be), but I walked into it without much apprehension especially since I'd had a such a stellar experience with Thinkpad previously, and also because Lenovo was confident enough in their own hardware compatibility to offer laptops with Linux pre-installed.

What I was not prepared for was how pleased I would be with my purchase or how little I would miss my OSX box. I was taken aback by the progress the Linux desktop has made in almost every category in just two short years.

Of course, excellence in available applications was the least shocking since I had been using Linux in anger as recently as 2006, but as far as the standard application suite is concerned, it's got the vast majority of users covered and covered well. In fact, many common applications such as Rhythmbox(music), Thunderbird(mail), and Pidgin(IM) compare quite favorably to their Windows and OSX counterparts. Of course, if Photoshop, Final Cut, AutoCAD, or *cough* Twitterific are on your shortlist of must-haves, you may want to hold off yet.

Finding, installing, and configuring applications on Linux has been superior for quite awhile. Windows has nothing. OSX has ports which is still weak when compared to apt or portage (for everything else it relies on the fact that there's just one program that does what you want to do, and your friends can tell you what it is). Not only can &lt;a href=&quot;http://redmonk.com/sogrady/2007/03/15/rhx/&quot;&gt;Steve O'Grady explain this better than I can&lt;/a&gt;, but this has also been par for the course in the Linux world for ages.

My eyebrows really started to raise when I saw how the laptop hardware pretty much worked right out of the box. In an area where Linux has historically lagged badly this was the easiest I've ever had it. I should mention that the first thing I did upon receiving the Thinkpad in the mail was to pitch the enterprise SUSE 10.1 that came with it in favor of a clean Ubuntu install. More than ever before it all just pretty much worked out of the box: WIFI, USB, Modem, Hibernate, Suspend, Function keys, volume keys, brightness, all worked without me having without me having to compile custom drivers, set boot options, unload and reload kernel modules in response to system events such as suspend/resume, and *gasp*, no editing XServer config files(another thing I used to enjoy as a teenager that I now find revolting). 

I'd still have to rate the hardware support as imperfect as I've still not gotten my native nvidia drivers installed and working yet, not to mention that $@*! little WIFI network LED. Clearly, this would not have happened with Windows or OSX. Nevertheless, this persistent and annoying side-effect of running Linux is quickly fading into the background and can be expected to completely disappear as more and more vendors offer Linux OEM.

But it was the third area of usability where I felt the greatest gains have been made. Usability is a loose term, but I mean roughly &quot;how easy is it to get things done and how easy is it for me to track the state of my machine as I'm doing them&quot;. As a result I lump application installation/configuration/launching/switching as well as overall &quot;beauty&quot; into this broad category.

The biggest shock to me personally was how good GNOME has gotten. I know. I know. I almost can't believe it myself that I'm loving the formerly troglodytic GNOME so much. It's not that it's ever been bad per se. It's just always been so damn mediocre that I've always preferred either KDE or a lightweight window manager and xterm to get by. After quickly replacing the atrocious Ubuntu poo-poo color with the standard blue clearlooks, it's quite attractive. The system menus(which I use very rarely) are well placed, not overbearingly nested, and the docks/toolbars stay out of sight for the most part. Most important though is that the suite of utility applets for configuring sound, network, bluetooth, notifications, power management, etc is both complete and stable. Mostly it just works and stays the hell out of my way. Of course, a large part of this isn't actually GNOME at all but due to other system components such as &lt;a href=&quot;http://www.freedesktop.org/wiki/IntroductionToDBus?action=show&amp;redirect=DBus&quot;&gt;D-Bus&lt;/a&gt;, &lt;a href=&quot;http://freedesktop.org/wiki/Software/Compiz&quot;&gt;Compiz&lt;/a&gt;, and my personal favorite: &lt;a href=&quot;http://do.davebsd.com/&quot;&gt;gnome-do&lt;/a&gt;, all of which can be used with KDE and other window managers.

D-Bus makes sure that all my applications have a standard way to communicate both with the desktop and with each other. For those of you who are familiar with OSX, think of it like Growl on steroidal crack. Not only do I get notified when people tweet, log on and off of skype and IM, but applications(or my own ruby/perl/javascripts) know when new hardware is introduced (if they're interested) and can even react to events such as the lid of my laptop opening closing. D-Bus is one of those technologies that you'll never see directly, but that enables all kinds of meta-synergystic awesomeness in the applications you use.

As far as eye-candy goes, I was also blown away by what compiz has accomplished. In many areas, the effects were every bit as good as those on my OSX box. Hiding windows to reveal the desktop is just as good. Tiling windows to select: not as good, but switching virtual desktops with the now compiz cube? Let's just put it this way: for the first time in my entire life, I'm actually using virtual desktops. In that sense, I feel like it is unfair to call eye-candy eye-candy, as though it were somehow unecessary. A proper effect illustrates the transition of an object from one state to another. It provides information to you that would not have access to otherwise. That's why they're popular. That's why we'll only see more of them, and as we do Linux will be right there at the forefront.

Apart from all the new worky-worky-ness and attractiveness of the latest desktop, I'm not sure if it would be worth it at all if not for one program: gnome-do. I know it sounds weird to put a single program, and such a small one at that, at the top of the list of things which make the Linux desktop such a pleasure to deal with these days, but that's simply how I feel from the bottom of my heart. Gnome-do is a quicksilver knockoff that's actually exceeded its parent in both functionality and stability. It's more flexible. It's easier to learn. There are many more useful plugins, and unlike Quicksilver, the developers are accessible *and* it's under active development.

There's hardly anything I don't use this program for: instant messaging, skype, mail, web browsing/searching, twitter; even things like suspending, logging in/out, and installing packages with APT. It's ridiculous. Apart from the venerable shell, and the individual applications themselves, no other piece of software colors my user experience more than gnome-do. It's primarily because of this program that I don't really care how the rest of window manager behaves as long as it stays out of my way. If I were the GNOME project (and I'm not) I would concentrate on expanding on this idea and making it the centerpiece of my environment.

Even with all this crazy deliciousness there are still some things that are not so great that deserve honorable mention. 

First up is application action integration and key bindings. It irritates me to no end that there is no standard action-to-key mapping in GNOME or KDE. Most applications seem to get save right, and there are generally constellations of key bindings around things like &quot;preferences&quot;, &quot;new&quot;, and &quot;quit&quot;, but nothing like Windows and especially not OSX, where knowledge of the system translates directly into knowledge of new and previously unencountered applications. Small things like this cannot be underestimated, and it seriously detracts from the perceived polish of the overall desktop. This problem feeds directly into the &quot;global keybindings&quot; problem. Because there is no standard for action-to-key mapping, an application developer is never quite sure which hot keys are &quot;safe&quot; because there are none. As a result application hot keys are constantly conflicting with the window manager and with each other(to my great frustration). Fixing this should be a priority. All application developers need is an easy path to do it the right way.

The same thing applies to a global menubar which exists in KDE(but is disabled by default), and is apparently a subject of some &lt;a href=&quot;http://bugzilla.gnome.org/show_bug.cgi?id=353076&quot;&gt;controversy&lt;/a&gt; in GNOME. I don't know why the global menubar has not been the standard on Linux, but I suspect that the the only reason is because the majority of developers grew up with the menubar-per-window like I did, and  perhaps because way back in the day some applications didn't have menus at all. Whatever the reason, the globalmenu bar is better, full stop. I feel qualified to say this for 2 reasons. 1) I use both linux and OSX daily, and 2) I used to scoff at the global menubar before I did. If you feel otherwise, you should shut up, try using OSX as your primary operating system for 2 years, and then return to Windows/Linux to see if you still feel the same way.

Despite these drawbacks, my recent experience leads me to believe that we closer than ever to a tipping point. All it will take is a few more mission critical apps like photoshop to cross the platform divide, and a few more hardware vendors to shore up the remaining compatibility issues before we all feel safe(and not just thrifty) investing in a linux box.

In the mean time, I'm going to keep with my setup of having OSX on my desk and linux in my lap. I've found that in human language, computer language, and even operating systems, it pays to be a polyglot.
</body>
        <teaser>My personal journey away from and eventual return to the linux desktop, how it compares suprisingly well with the competition, and how it could be better.</teaser>
        <timestamp>1222105989</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
    <node_revisions>
        <nid>69</nid>
        <vid>77</vid>
        <uid>4</uid>
        <title>In search of a better autogrowing textfield</title>
        <body>Autogrowing textfields are a nice piece of flash for any web application. They conserve precious screen real-estate, but grow to a height just big enough to accomodate the text the user actually typed without resorting to unsightly things scrollbars.

There are a number of solutions out there, but since I'm using &lt;a target=&quot;_blank&quot; href=&quot;http://jquery.com&quot;&gt;jQuery&lt;/a&gt; on my current project, the two that I evaluated were &lt;a href=&quot;http://plugins.jquery.com/project/Growfield&quot; target=&quot;_blank&quot;&gt;Growfield&lt;/a&gt; and &lt;a target=&quot;_blank&quot; href=&quot;http://plugins.jquery.com/project/Autogrow&quot;&gt;Autogrow&lt;/a&gt;.

While those two plugins often did what they were supposed to do, they also had tons of quirks and edge cases that prompted me give it a go myself. Specifically, I found that depending on the browser and operating system I would encounter:

&lt;ul&gt;
 &lt;li&gt;eye-jarring jitter wherein the textfield would expand and contract my 1 or 2 pixels with every keystroke&lt;/li&gt;
 &lt;li&gt;resizing of the textfield to 0 pixels, when there was no text in the box
 &lt;li&gt;intermittent loss of focus on some browsers&lt;/li&gt;
&lt;/ul&gt;

But most importantly, it seemed that more often than not, the text did not actually grow correctly in any of the real-world environments that I tried in my production application.

As I discovered, the main reason for this was that the technique used was to fill a hidden DIV element with the text from the textfield, and then use the height of that DIV to determine how tall the textfield should be. That works great except for one nasty detail: most browsers use native widgets for text inputs, and those native widgets have their own word-wrap and layout code, so even things like font, line-height and letter spacing being equal, you can still get different word-wrap behavior from OS to OS.

In an attempt to side-step all of these issues, I thought &quot;what if instead of using a DIV element to calculate the height, I could use a native textfield?&quot; After all, if native textfields use a different word-wrap and layout algorithms, can't I just try and harness those algorithms, whatever they might be? At first this seems perfectly circular i.e.: I don't know what the ideal height of a textarea should be, so I'll use the height of a texarea to find out. Of course there's a twist, and the wonderful little property that makes it all possible is the &lt;a target=&quot;_blank&quot; href=&quot;https://developer.mozilla.org/en/DOM/element.scrollHeight&quot;&gt;scrollHeight&lt;/a&gt;.

lines, not heights.
</body>
        <teaser>Dissatisfied with the quirks in existing solutions to autogrow textfields, I decide to attempt my own cross browser, cross operating system auto growing textfield.</teaser>
        <timestamp>1229436853</timestamp>
        <format>1</format>
        <log></log>
    </node_revisions>
</cionokto>
