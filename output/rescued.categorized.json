[
  {
    "time": "1154708363",
    "title": "Taming the Rhino: Making Mozilla's Javascript Command Line a Little Less Brutish.",
    "categories": ["JavaScript"],
    "body": "<p>I recently <a href=\"http://www.thefrontside.net/blog/learning_javascript_from_the_command_line\">described</a> how to use the one of the <a href=\"http://www.mozilla.org/js/\">freely available shells</a> as a great way to explore your javascript runtime. There are two implementations of the javascript interpreter sponsored by the Mozilla project, <a href=\"http://www.mozilla.org/js/spidermonkey\">Spider Monkey</a> an interpreter implemented in C, and <a href=\"http://www.mozilla.org/rhino/\">Rhino</a>, an interpreter implemented in Java. With respect to the javascript runtime itself, these two implementations are almost identical, and so what works in one, will generally work in the other. They diverge, however, when it comes to embedding objects and functions that are implemented in a language other than javascript. Naturally, Spidermonkey is better suited for embedding objects implemented in C, while Rhino excels at embedding objects implemented in Java.</p>\n\n<p>What exactly is \"embedding\" an object implemented in Java? If you don't know what this means already, I could try to describe it to you, but why not show it live and in the flesh with the Rhino command line? That's the exploratory technique that I find so valuable.</p>\n\n<code type=\"javascript\">\ncowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main \nRhino 1.5 release 5 2004 03 25\njs> var javaString = new java.lang.String(\"Hello World\")\njs> javaString.hashCode()\n-862545276\njs> javaString.startsWith(\"Hello\")\ntrue\njs> javaString.startsWith(\"World\")\nfalse\njs> var jsString = new String(\"Hello World\")\njs> jsString.startsWith(\"Hello\")\njs: \"<stdin>\", line 5: uncaught JavaScript exception: TypeError: startsWith is not a function. (<stdin>; line 5)\njs>                    \n</code>\n\n<p>As you can see, <code type=\"javascript\">javaString</code> is a reference to an actual <code type=\"java\">java.lang.String</code> object, and has access to all the methods of that class, many of which are not contained in the native javascript <code type=\"javascript\">String</code>.</p>\n\n<p>Embedding goes two ways. Not only can you instantiate and use java objects from javascript, but you can also pass in javascript objects as parameters to java methods. You can even extend objects and implement interfaces in javascript! Once again, the command line shows this in action. In this example, we'll implement the <code type=\"java\">java.lang.Runnable</code> interface in javascript</p>\n\n<code type=\"javascript\">\ncowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main \nRhino 1.5 release 5 2004 03 25\njs> var impl = new Object()\njs> impl.run = function() {print(\"Yeah that's right, you better run!\")}\n\nfunction () {\n    print(\"Yeah that's right, you better run!\");\n}\n\njs> var runnable = new java.lang.Runnable(impl)\njs> var thread = new java.lang.Thread(runnable)\njs> thread.run()\nYeah that's right, you better run!\njs>                                          \n</code>\n\n<p>This is all well and good, but that's quite a bit of code to get right the first time! Chances are, if you're just starting out with the Rhino command line, you're not going to have as much luck, especially if you're using it as a tool to learn javascript in the first place, and unfortunately, this is where Rhino comes up <em>way</em> short. Rather than have a forgiving <a href=\"http://en.wikipedia.org/wiki/Command_line_interface\">CLI</a>, Rhino punishes you for every syntactic and semantic error that you make by not collecting command history. Even worse, hitting the up and down arrows result in bizarre character literals output directly to the prompt. You can't even correct a mistake that you've made in the current line you're typing without backspacing all the way to the error, and then re-typing from that point on.</p>\n\n<p>In this example, I'd like to arrow-left so that I can correct my misspelling of \"java.lang\"</p>\n<code type=\"javascript\">\ncowboyd@subzero:~$ java -classpath js.jar org.mozilla.javascript.tools.shell.Main \nRhino 1.5 release 5 2004 03 25\njs> var r = new java.lng.Runnable(^[[D^[[D^[[D^[[D\n</code>\n\n<p><strong>Ugh!</strong> Or what happens if the shell didn't take my last command because it was slightly bogus? I'd like to retrieve the command with the up-arrow, edit it a little bit in-place and then try again because after all, it was only <em>slightly</em> bogus. Watch me try and recover from this minor syntax error...</p>\n\n<code type=\"javascript\">\ncowboyd@subzero:~$ java -classpath /usr/share/java/js.jar org.mozilla.javascript.tools.shell.Main\nRhino 1.5 release 5 2004 03 25\njs> var f = function() {print(\"oops I forgot to close these parens\"}\njs: \"<stdin>\", line 29: missing ) after argument list\njs: var f = function() {print(\"oops I forgot to close these parens\"}\njs: ...............................................................^\njs: \"<stdin>\", line 29: missing } after function body\njs: var f = function() {print(\"oops I forgot to close these parens\"}\njs: ...............................................................^\njs: \"<stdin>\", line 29: Compilation produced 2 syntax errors.\njs>\njs> //I know. Up-arrow to the rescue!\njs> ^[[A^[[A^[[A^[[A^[[A^[[A //drat, foiled again! \n</code>\n\n<p>These problems are in particularly nasty contraposition to the technique of exploration via the shell which I advocate because the the cost for failure is so expensive. Indeed, what is so wonderful about most modern shells is that the cost for a syntax error is so small. For some reason, the implementors of the Rhino CLI decided to implement their shell with the typical functionality circa 1962.</p>\n\n<p>It's not a problem for me though, thanks to one of my favorite unsung java libraries, <a href=\"http://jline.sourceforge.net/\">JLine</a>. JLine hits a super sweet spot in that it takes somewhere around 0 effort to add loads of standard functionality to your command line interfaces. It seems that no one in the java world bothers with a decent CLI; tragic in my opinion, but probably because it's considered well-understood, non-trivial and therefore tedious. With JLine, building that CLI comes at around 0 cost. What's really cool about JLine is that a program doesn't even need to be written with it. It can transparently intercept the console input for <em>any</em> java program and seamlessly splice on any and all functionality you'd expect from a hot shell: in-place editing, command history, you name it. In a word: <em>perfect</em> for a beast like Rhino.</p>\n\n<code type=\"javascript\">\ncowboyd@subzero:~$ java -classpath js.jar:jline.jar  jline.ConsoleRunner org.mozilla.javascript.tools.shell.Main\nRhino 1.5 release 5 2004 03 25\njs> prnt(\"oops let me try that again\")\njs: \"<stdin>\", line 1: uncaught JavaScript exception: ReferenceError: \"prnt\" is not defined. (<stdin>; line 1)\njs> print(\"oops let me try that again\")\noops let me try that again\njs> //trust me, that was easy. Just like it should have been in the first place.\njs>       \n</code>\n\n<p>JLine truly is a healing salve for your chafing CLI woes. Did I mention that it's cross-platform?</p>\n\n<p>While the barrier to entry is extremely low, the path to upgrade is but a mild upward slope. If you do end up wanting nice extras such as TAB-completion or custom key bindings, it has a simple configuration mechanism, and <a href=\"http://jline.sourceforge.net/apidocs/index.html\">Java API</a> to make the pain of writing custom code as minimal as possible. But that's another bedtime story altogether.</p>\n\n<p>I hope you enjoy JLine with Rhino, or with any other impolite java command lines you may use!</p>",
    "teaser": "I recently described how to use the one of the freely available shells as a great way to explore your javascript runtime. There are two implementations of the javascript interpreter sponsored by the Mozilla project, Spider Monkey an interpreter implemented in C, and Rhino, an interpreter implemented in Java. With respect to the javascript runtime itself, these two implementations are almost identical, and so what works in one, will generally work in the other. They diverge, however, when it comes to embedding objects and functions that are implemented in a language other than javascript. Naturally, Spidermonkey is better suited for embedding objects implemented in C, while Rhino excels at embedding objects implemented in Java."
  },
  {
    "time": "1183157077",
    "title": "RYE: Repeat Yourself Enough",
    "categories": ["ProSkillz"],
    "body": "<p>Lately, I've been practicing the exact opposite of the DRY principle. Yup, you read that right:  I repeat myself constantly, and in as many different contexts... including code, database schemas, test-plans and even documentation. The reason: So I won't have to repeat myself. It's not that I don't buy into the DRY principle, or that I'm somehow skeptical about the value its proper application yields. I just find it difficult to achieve in practice.</p>\n\n<p>According to the <a href=\"pragmaticprogrammer.com\">Pragmatic Programmers</a> who coined the term:</p>\n<blockquote><em>\nDRY says that every piece of system knowledge should have one authoritative, unambiguous representation. Every piece of knowledge in the development of something should have a single representation. A system's knowledge is far broader than just its code. It refers to database schemas, test plans, the build system, even documentation.\n</em></blockquote>\n\n<p>Essentially it is an empirical measure against which to gauge the proper level of abstraction in your system. If you have not made the right abstractions, then you will be found to be repeating yourself, whereas if you <em>have</em> made the right abstractions, then you won't. This is because abstractions <em>directly encode</em> the system  knowledge that DRY talks about no less than 3 times in its definition.</p>\n\n<p>The benefits of good abstractions are many and well known, and I'm not going to go into them here (there's always the internet for that), but what I've taken particular heed of lately is that abstraction is a double-edged sword that should not be wielded lightly. Get it right, and the previously intractable dissolves to simplicity in an instant... but get it wrong, and a snarl of complexity gridlocks your code base just as fast.</p>\n\n<p>You see, I wasn't telling the whole truth when I said before that abstractions directly encode system knowledge. It would be more correct to say: <em>Good</em> abstractions directly encode system knowledge. <em>Bad</em> abstractions directly encode <em>system ignorance.</em></p>\n\n<p>The problem is that the DRY principle, while still very valid and useful, doesn't help us here because  it assumes system knowledge as its input. But really valuable system knowledge isn't just lying around, it must be carefully constructed with significant amounts of research and analysis. That is to say, it must be learned. And what better way is there to learn something than by doing it over and over again until you know it inside and out? What better way is there than trial and error to really <em>get at the physics</em> of a phenomenon until you can use it to easily analyze it in all its forms? The fact is, you've got to repeat yourself over and over enough times until you can say with confidence: <em>This I know to be true.</em></p>\n\n<p>You can think of it like doing your math homework, or being like Daniel-San: waxing Mr Miyagi's car again and again until you know karate by instinct. In fact, I'm convinced that there's no other way to generate <em>real</em> knowledge.</p>\n\n<p>Ironically, I repeat myself a lot these days because I hate repeating myself. I loathe it with an almost pathological passion, and sometimes (more often then I'd like to admit) it plays to my disadvantage. In my obsessive/compulsive rush to not repeat myself I'll introduce a bad abstraction based on flawed or incomplete system knowledge, and worse still, I won't know that I took the wrong fork in the road until it's way late in the game and it's hard to find the way back home.</p>\n\n<p>That's why I'm playing it cool lately and making sure that I repeat myself enough to <em>perfect</em> the system knowledge required to keep myself DRY.</p>",
    "teaser": "Everybody believes in the DRY principle. Not only is it common sense, but projects like ruby on rails have achieved real success adopting it as a core value. In practice however, applying it with too much zeal can actually be harmful. That's why in my experience, the best way to uphold the DRY principle is to violate it mindfully."
  },
  {
    "time": "1214424738",
    "title": "Please Stop Using Global Variables In Ruby",
    "categories": ["Ruby"],
    "body": "I couldn't sleep this morning. I woke up around 4:30 AM thinking about how code is organized in ruby. I'm sure I will look back on my life with disbelief and a touch of shame at such behavior, but that is (hopefully) decades away.\n\nThe problem turning around in my head which eventually caused me to wake was my own inability to come to terms with a prevalent pattern in the ruby community: the global variable. Swirling in my semi-conscious mind was a motley mixture of bewilderment, self-doubt, scorn and a touch of righteous indignation. \n\nOn the one hand, there must be something I'm missing. One of the reasons I love ruby-space is that it tends to be filled with talented programmers who work the language to produce code that is powerful while at the same time being easy to understand and use. Surely, their collective conscious is a better guide than my own experience and intuition. I worry that is primarily my own fuddy-duddity that prevents me from accepting global variables as good practice.\n\nTo clarify, when I speak about global variables, I'm talking primarily about using global class objects as the repositories for methods and state. There are plenty examples out there of this:\n\n<code type=\"ruby\">\n# active record\nPost.find(:all)\n\n# amazon s3\nS3Object.store('me.jpg', open('headshot.jpg'), 'photos')\n\n# paypal-business gem\nPaypal.capture(params)\n</code>\n\nIn each of the preceding examples, there is implicit state stored on the class object. In active record, the database connection information, in S3Object, the AWS access key id and secret key, and finally, in Paypal, the paypal server url and business account name. Because the class object is global, the state on it is effectively global. And <em>that</em> is what sets my spidey sense to tingling.\n\nNot only is this style subject to the all the arguments for why <a href=\"http://c2.com/cgi/wiki?GlobalVariablesAreBad\">global variables are bad</a>, but it just flat-out makes the API's themselves less useful. Here's an example from an actual project.\n\nI had a system which needed to talk to two different SQS queues which were contained in two separate amazon web services accounts. Unfortunately, the standard SQS api uses class variables to store configuration information, and then a set of class methods to access the queue services, so I was forced to overwrite the global configuration parameters every time I wanted to access the queue. Luckily, the application was not multi threaded, or I would have been stuck rolling my own.\n\nI don't see why:\n<code type=\"ruby\">\nSQS.access_key_id = 'ACCESS_ID'\nSQS.secret_access_key = 'SECRET'\nq = SQS.get_queue 'MyQueue'\n</code>\n\nis any better than:\n<code type=\"ruby\">\n@sqs = SQS.new :access_key_id => 'ACCESS_ID', :secret_access_key => 'SECRET'\nq = @sqs.get_queue 'MyQueue'\n</code>\n(IMHO it's uglier) and in the second, hypothetical API, you can painlessly, and in a thread-safe manner talk to multiple queues on multiple accounts.\n\n<code type=\"ruby\">\n@one = SQS.new :access_key_id => 'AccountOne', :secret_access_key => \"AccountOneSecret\"\n@two = SQS.new :access_key_id => 'AccountTwo', :secret_access_key => \"AccountTwoSecret\"\n</code>\n\nBut there's a deeper principle at stake here than allowing multiple instances. It's about giving <em>power to the programmer</em>, and letting them control the API, and not the other way around. \n\nIt seems to me that when you're designing an API, you want the programmer(to the greatest extent possible) be able to create their own little world over which they have complete control. The should be able to spin up as many instances of your code and use it in ways that perhaps you hadn't thought of without them having to worry that one world will interfere with another world they've created.\n\nIf you've absolutely got to go global, it's very little effort to wrap a static/global interface around a single default instance, but not the other way around. Given the similarity in effort, it seems like embedability is the way to go.\n\nGlobal variables surely have their place in some applications, and I'm not opposed to them on purely ideological grounds, but ruby already has a construct for global variables... it's called the '$' sigil. \n\nIn your environment.rb, or wherever you can just put:\n<code type=\"ruby\">\n#environment.rb\n$sqs = SQS.new :access_key_id => 'AccountOne', :secret_access_key => \"AccountOneSecret\"\n\n#somewhere else\nq = $sqs.get_queue \"MyQueue\"\n</code>\n\nMy suspicion is that Ruby on Rails shares a large portion of the blame for the evolution of this style what with <code>ActiveRecord.establish_connection()</code> and friends. As the highest profile ruby project it's only natural that people will copy its conventions --for better or for worse. Still, I wish people in the future would break from this particular precedent and if they go global, to do it properly. Give the poor class objects a break!\n",
    "teaser": "From Ruby on Rails, to the Amazon Web Services libraries, the ruby culture has a serious love-affair with global variables which I have yet to grasp."
  },
  {
    "time": "1154537376",
    "title": "Learning Javascript from the Command Line.",
    "categories": ["JavaScript"],
    "body": "<p>In the <a href=\"http://www.drunkandretired/podcast\">Drunk and Retired Podcast</a>, <a href=\"http://www.drunkandretired.com/2006/07/08/drunkandretiredcom-podcast-episode-59-lightside-v-darkside-plus-learning-javascript-the-language-not-the-javascript-the-browser-scriptus/#comments\">episode  59</a> I spoke about learning your way around javascript the language independently from the browser, and how you can use the command line tools that come with the various javascript engines to interactively explore the javascript runtime.</p>\n\n<p>When most folks think about javascript, they think about scripts that they embed into their web pages, but the truth is that it is a general-purpose programming language <em>that has absolutely nothing to do with HTML</em>. In fact, the javascript runtime is so orthogonal to other web browser functionality, that mozilla offers the javascript interpreter that it uses in Firefox and friends as a <a href=\"http://www.mozilla.org/js/spidermonkey\">completely separate download</a>. It's available as both .deb or .rpm package, and just to show it: Here's the wonderful hello world program, as entered into the shell.</p>\n\n<code type=\"javascript\">\ncowboyd@subzero:~$ js\njs> alert('hello world')\n1: ReferenceError: alert is not defined\njs>    \n</code>\n\n<p>OK, so I boobie-trapped that example in an attempt to beat the point I've been making to death. It's an error because <code type=\"javascript\">alert()</code> isn't actually part of javascript. In the context with which we're familiar(DHTML), it's a function that's <em>defined by the browser</em>. Of course, it just so happens that every browser implements <code type=\"javascript\">alert()</code> to behave in almost exactly the same way, but the function itself has nothing to do with the javascript core. Implementing our own version of alert is simple enough though.</p>\n\n<code type=\"javascript\">\njs> var alert = function(message) { print(message)}\njs> alert('hello world')\nhello world\njs>            \n</code>\n\n<p>Personally, I love the command line because it let's you dig your fingers deep into the computer's brain and, by pushing its buttons directly, see what's going to work and what isn't. Every time I have a question about how the javascript interpreter is going to behave, I don't look up the spec, or write something into my programs that I'm not sure how it will work. Instead, I fire up my trusty interpreter to discover <em>empirically</em> how the system works. Need to know if a RegExp is going to match? Don't guess. Ask the interpreter.</p>\n\n<code type=\"javascript\">\njs> \"foo\".match(/bar/)\nnull\njs> \"foo\".match(/oo/)\noo\njs> \"foo\".match(/oo$/)\noo\njs>             \n</code>\n\n<p>Wonder what the built-in \"constructor\" property of an object is? The runtime can tell you. It's his business after all.</p>\n<code type=\"javascript\">\njs> function A() {}\njs> var a = new A()\njs> var o = new Object()\njs> a.constructor\n\nfunction A() {\n}\n\njs> o.constructor\n\nfunction Object() {\n    [native code]\n}\n\njs> o.constructor == Object\ntrue\njs> a.constructor == A\ntrue\njs>                            \n</code>\n\n<p>Sure, you could write an in-browser script to do all this and throw output at yourself in the form of alerts, but the beauty of the javascript command line is that you can collapse the whole edit-save-reload-alert scripting cycle into a single step; type in the next line and see what happens. It's that super-tight feedback which let's you learn that much faster.</p>",
    "teaser": "<p>In the <a href=\"http://www.drunkandretired/podcast\">Drunk and Retired Podcast</a>, <a href=\"http://www.drunkandretired.com/2006/07/08/drunkandretiredcom-podcast-episode-59-lightside-v-darkside-plus-learning-javascript-the-language-not-the-javascript-the-browser-scriptus/#comments\">episode  59</a> I spoke about learning your way around javascript the language independently from the browser, and how you can use the command line tools that come with the various javascript engines to interactively explore the javascript runtime.</p>\n\n<p>When most folks think about javascript, they think about scripts that they embed into their web pages, but the truth is that it is a general-purpose programming language <em>that has absolutely nothing to do with HTML</em>. In fact, the javascript runtime is so orthogonal to other web browser functionality, that mozilla offers the javascript interpreter that it uses in Firefox and friends as a <a href=\"http://www.mozilla.org/js/spidermonkey\">completely separate download</a>."
  },
  {
    "time": "1153014102",
    "title": "Live Stylesheets",
    "categories": ["DHTML", "JavaScript"],
    "body": "<p>Even after working with DTML for over a year, I'm still constantly astounded by how <em>dynamic it actually is</em>. The most important thing to keep in the back of your head as a DHTML programmer is that the same mechanisms used by the browser to build an HTML document at load time are available to your in-page scripts. So, really, the static loading of your pages when you access a url is just the HTML parser invoking the same methods on the same objects that are available to your javascript code.</p>\n<!--break-->\n<p>Take this static HTML code:</p>\n<code type=\"html\">\n<html>\n<body><div id=\"foo\">This is my div</div>\n</html>\n</code>\n\n<p>The same result can be achieved dynamically:</p>\n<code type=\"html\">\n<html>\n<body onload=\"addFoo()\">\n<script type=\"text/javascript\">\nfunction addFoo() {\n   var foo = document.createElement('div')\n   foo.id = \"foo\"\n   var fooContent = document.createTextNode(\"This is my div\")\n   foo.appendChild(fooContent)\n   document.body.appendChild(foo)\n}   \n</script>\n</html>\n</code>\n\n<p>Nothing mind-blowing there; indeed, this technique is the cornerstone of DHTML. But it takes awhile to let it sink in to the point where using it is one of your first strategies to solving a problem. Specifically, you can use it not only to dynamically change layout-related HTML elements (span, div, ul, table, et al...), but also to create/modify <em>behavioral elements</em>(link, script, meta, etc...)</p>\n\n<p>That said, I was recently trying to create a CSS stylesheet at runtime, and enable it so that its rules would be active in the page. At first, I was trying to use the <a href=\"http://www.w3.org/TR/DOM-Level-2-Style/ecma-script-binding.html\">W3C DOM CSS interface</a>, the idea being to  create a stylesheet object, add a bunch of rules to it corresponding to the rules that I wanted, and then put it into the stylesheets array. Unfortunately, doing this in a cross-platform way is <a href=\"http://www.quirksmode.org/dom/w3c_css.html\">borderline impossible</a>. After pounding my head against that for awhile and getting nowhere,  I figured, \"why not just create the whole thing as a top-level html element, and let the browser just take it away from there?\" The basic strategy is this: create a <code><style></code> DOM Element dynamically, add text content to it representing the actual stylesheet, and then pop it into the HTML DOM. With a few caveats, it works like a charm. The browser parses the text as CSS, and links in into the live cascade.</p>\n\n<p>I mentioned caveats.. well, of course there are the obligatory cross-browser compatibility issues to be aware of:</p>\n\n<ul>\n  <li>In Internet Explorer, you can't just append a Text Node to a Style element, you have to use some trickery to get it to work.</li>\n  <li>KHTML &amp; Safari do not honor <code><style></code> elements that are not contained in the HEAD element of the document.</li>\n  <li>While IE and Mozilla always create a HEAD element for you if one doesn't exist, Opera and KHTML do not.</li>\n  <li>While Opera will honor a dynamically created HEAD element, KHTML will not. (That's a bug in KHTML as far as I'm concerned as it violates the DHTML principle that I've been talking about.)</li>\n</ul>\n\n<p>All in all, they're nothing to worry about and do not stand in the way of the fundamental technique. I've created a <a href=\"/bitbucket/live-stylesheet.html\">demo page</a> showing this code in action. As a nice side effect, it works as quick way of playing around with CSS properties and how they effect the styling of elements.</p>\n\n<p>Here is the source snippet implementing the technique I've described here:</p>\n<code type=\"javascript\">\n   var style = document.createElement('style')\n   style.setAttribute('type', 'text/css')\n\n   var cssText = $('cssText').value\n   if (style.styleSheet) { //IE only\n      style.styleSheet.cssText = cssText\n   } else {\n      //for some reason this fails in IE.\n      var text = document.createTextNode(cssText)\n      style.appendChild(text)\n   }\n</code>",
    "teaser": "<p>Even after working with DTML for over a year, I'm still constantly astounded by how <em>dynamic it actually is</em>. The most important thing to keep in the back of your head as a DHTML programmer is that the same mechanisms used by the browser to build an HTML document at load time are available to your in-page scripts. So, really, the static loading of your pages when you access a url is just the HTML parser invoking the same methods on the same objects that are available to your javascript code.</p>"
  },
  {
    "time": "1212682925",
    "title": "Patiently waiting for JavaFX Script",
    "categories": ["Java", "JavaFX"],
    "body": "About a year ago, SUN announced a \"new\" platform for developing embeddable applications on the web, and they called this platform JavaFX. In reality, this new platform seems to me less of an innovation and more of a rehabilitation of the applet infrastructure which they allowed to languish over the last decade. \n\nThat's not a criticism, it's a compliment. I'm happy that they're going to give applets another go. Heck, I'm even glad they're calling it JavaFX too. \"Applet\" always sounded too effete anyway. In any case I've always like the applet model, and wished it were a more viable option for web development. Given the success of Flex, which also uses the applet model, other people must feel this way too.\n\nBut I digress.\n\nAs far as I can tell (I've only been able to get my hands on some demos and a little open source compiler) JavaFX involves upgrading some of the more boorish aspects of the  java browser plugin. To name a few: faster download and initialization of application and JRE code, tighter integration and communication with the rest of the DOM, modern video and audio codecs.... All those are necessary upgrades to ensure the viability of the platform, but they can hardly be called innovative\n\nThat said, one new and curious aspect of JavaFX is that it will (for the most part) <em>not</em> be written in Java. Instead, SUN is promoting a completely new and aptly named scripting language: JavaFX script.\n\nOf all the new features it was the specification of this language that impressed me most. I'm not sure how this little gem of a language managed to come out of SUN, but it's absolutely loaded with modern language features to make programming in it clear and concise.\n\nI'm talking about \n<ul>\n<li>closures</li>\n<li>pure functions</li>\n<li>lazy evaluation</li>\n<li>list comprehensions (that put ruby's to shame)</li>\n<li>optional declarative syntax</li>\n<li>rolled in query language for searching and modifying data structures</li>\n<li>data binding supported at the language level</li>\n<li>tons of stuff I'm sure I don't even know about....</li>\n</ul>\n\nOverall it seems like JavaFX script is like 4 separate languages existing in harmony in one neat package, and as I read more and more about it, I kept thinking to myself \"This is not just some standard UI scripting language with a little sugar and a few extra hooks for writing GUIs. This is positively <em>avante-garde</em>.\n\nI like the idea that SUN can challenge their developers to think in new ways, but I can also imagine a backlash, or more mildly put, an general aversion in the developer community, since this is not any old language research project, but the centerpiece in SUN's product in the battle over the browser VM.\n\nSo where did this decision come from to go with such a departure from the norm when it came to defining JavaFX script? I like it alot, but I worry that SUN is going to chicken out, and go with something a little less sexy but a little more digestible (at least in the short term) to its current developers as well as the developers of competing platforms like Adobe Flex or Microsoft Silverlight.",
    "teaser": "Upon closer inspection, the new language being promoted by SUN to develop for the embeddable web, JavaFX Script, is much more than meets the eye. I wonder why the abrupt departure from their habitually conservative stance when it comes to language features."
  },
  {
    "time": "1181365634",
    "title": "The Chicken and the Vine: Trans-Global Pair Programming",
    "categories": ["ProSkillz"],
    "body": "<p>The Frontside Software is a three person company with \"offices\" in Michigan, Finland, Massachusetts, and New Jersey. We're don't see each other every day, and we're rarely in the same room, but we still do a significant portion of our development work in pairs. Despite many other competing setups, we still do this with the not-so-new, not-so-exciting, yet extremely flexible and reliable <a href=\"http://www.realvnc.com/what.html\" title=\"Real VNC\">VNC</a> combined with a voip product like <a href=\"http://skype.com\" title=\"Skype VOIP\">skype</a>.</p>\n\n<h3>How it works</h3>\n<p>One of us (the driver) runs a vnc server which transmits everything that is rendered on his display to one or more vnc clients (passengers) being run by the other half of the pair. That way, the client can see everything that goes on while the driver is coding, including  his code editor, his web browser, his terminal windows, etc... Meanwhile, you've got real-time audio so that you can talk about the work you're doing as you're doing it.</p>\n\n<h3>Is there something better?</h3>\n<p>Not yet. We've seen some new collaborative coding tools like <a href=\n\"http://www.codingmonkeys.de/subethaedit/\" title=\"SubEthaEdit Site\">SubEthaEdit</a> and <a href=\"http://gobby.0x539.de/trac/\" title=\"Gobby Trac Site\">Gobby</a> come down with some very slick features. Specifically, the updating and syncing of editor state between the two machines is very fast, and effectively coordinates multiple people editing the same document, with as few clashes as possible. The way in which they do this is impressive, but after having given it several abortive attempts as a real solution for remote pair programming, we went back to good old VNC. Here's why:</p>\n<ol>\n<li><strong>Lack of editing features:</strong> The collaborative editors of today are good at one thing: editing text collaboratively. The problem is that when you're pair-programming, you're not editing text, you're editing code, and code is only a simple sequence of text to a computer. There are lots of editors these days that leverage the semantically rich structure of the documents on which they operate like TextMate, Emacs, Eclipse.... everybody has a favorite, and because your collaborative editor is not your favorite, that means it sucks ;-)</li>\n<li><strong>Lack of environment:</strong> Of course, there are a scant few collaborative editing plug-ins for existing IDEs which would seem to address this problem, but adding on another layer, development is about more than just coding. It's about browsing documentation, running servers, invoking build scripts from the command line, and about a million other tiny tasks. In effect, your <em>actual</em> IDE is not just one application, it's your whole computer, and if the only thing being shared is a single app, then it cuts your pair out of a lot of important context. With VNC, everybody sees what's going on all the time. They can see not only the code, but also the running program.</li>\n<li><strong>Editing the same document at the same time isn't really helpful anyway</strong>: If you've done much pair-programming, then you realize that the real value doesn't come from having two sets of fingers on the keyboard at the same time. In fact quite the opposite: Both participants are following the thread of development, but one of them is freed entirely from the act of coding so that they can think about high-level architectural issues, or lookup api docs, or google for resources --all in parallel. Having both people pounding on the keyboard actually hinders this dynamic.</li>\n<li><strong>VNC is cross platform</strong>: This is a biggie. There are vnc clients and servers for Windows, OSX, and Linux (we code on all three), and they all interoperate with each other. That's a pretty hard feature to top, especially for single-platform apps like SubEthaEdit and Gobby which run on OSX and Linux respectively.</li>\n</ol>\n\n<p>About the only drawback to pair programming with VNC is that there can be some fairly significant lag (between 1-4 seconds) depending on network load on either end, but even so, when it comes to <em>actually</em> developing collaboratively, VNC and Skype are our daily tools of choice.</p>\n\n<h3>VNC Clients/servers</h3>\n<ul>\n<li><strong>OSX client</strong>: <a href=\"http://sourceforge.net/projects/cotvnc/\" title=\"Chicken of the VNC\">Chicken of the VNC</a></li>\n<li><strong>OSX server</strong>: <a href=\"http://www.redstonesoftware.com/products/vine/server/vineosx/\" title=\"Vine Server\">Vine Server</a></li>\n<li><strong>Windows/Linux client/server</strong>: <a href=\"http://www.tightvnc.com/download.html\" title=\"Tight VNC\">http://www.tightvnc.com/download.html</a></li>\n</ul>\n",
    "teaser": "<p>Pair-Programming, a popular member in the family of agile best practices, can be difficult to implement when the participants aren't even in the same country, much less the same room. Yet it's possible to do it effectively, and the tools we use to do it every day are robust, cross platform, and best of all, completely free.</p>"
  },
  {
    "time": "1181585465",
    "title": "When Using Mod Rewrite, Remember That The Version Counts",
    "categories": ["Tips"],
    "body": "Pro Tip: Which regular expressions work depends on the version of Apache/mod_rewrite that you're using. I recently tested the following rewrite rule on Apache2\n<code>\nRewriteRule ^archives/(\\d+).html http://www.thefrontside.net/map2new.php?$1 [R]\n</code>\n\nI wanted to match files like archives/000532.html.\n\nBut when it came time to deploy, it didn't work. Turns out the environment I was deploying to was using a different version of Apache. That's bad practice of course, but aside from that, the little gotcha was that the regular expression interpreter was different in different versions of Apache, and in this case, its behavior differed not only from the newer version but also from the behavior of most regexp engine's out there. Specifically, the \"digit\" literal <code>\\d</code> is not understood by older versions (which interpret it as a literal \"d\"). \n\nInstead I had to use [0-9]\n\n<code>\nRewriteRule ^archives/([0-9]+).html http://www.thefrontside.net/map2new.php?$1 [R]\n</code>\n\nThis is a very specific nugget, but hopefully it will save someone a headache down the road. Just remember, if your mod_rewrite regexp isn't working, <em>check the specific version of the engine</em>, and make sure your regexp is one that it will understand.",
    "teaser": "A (very) brief note regular expressions in mod_rewrite across different versions."
  },
  {
    "time": "1229436853",
    "title": "In search of a better autogrowing textfield",
    "categories": ["DHTML"],
    "body": "Autogrowing textfields are a nice piece of flash for any web application. They conserve precious screen real-estate, but grow to a height just big enough to accomodate the text the user actually typed without resorting to unsightly things scrollbars.\n\nThere are a number of solutions out there, but since I'm using <a target=\"_blank\" href=\"http://jquery.com\">jQuery</a> on my current project, the two that I evaluated were <a href=\"http://plugins.jquery.com/project/Growfield\" target=\"_blank\">Growfield</a> and <a target=\"_blank\" href=\"http://plugins.jquery.com/project/Autogrow\">Autogrow</a>.\n\nWhile those two plugins often did what they were supposed to do, they also had tons of quirks and edge cases that prompted me give it a go myself. Specifically, I found that depending on the browser and operating system I would encounter:\n\n<ul>\n <li>eye-jarring jitter wherein the textfield would expand and contract my 1 or 2 pixels with every keystroke</li>\n <li>resizing of the textfield to 0 pixels, when there was no text in the box\n <li>intermittent loss of focus on some browsers</li>\n</ul>\n\nBut most importantly, it seemed that more often than not, the text did not actually grow correctly in any of the real-world environments that I tried in my production application.\n\nAs I discovered, the main reason for this was that the technique used was to fill a hidden DIV element with the text from the textfield, and then use the height of that DIV to determine how tall the textfield should be. That works great except for one nasty detail: most browsers use native widgets for text inputs, and those native widgets have their own word-wrap and layout code, so even things like font, line-height and letter spacing being equal, you can still get different word-wrap behavior from OS to OS.\n\nIn an attempt to side-step all of these issues, I thought \"what if instead of using a DIV element to calculate the height, I could use a native textfield?\" After all, if native textfields use a different word-wrap and layout algorithms, can't I just try and harness those algorithms, whatever they might be? At first this seems perfectly circular i.e.: I don't know what the ideal height of a textarea should be, so I'll use the height of a texarea to find out. Of course there's a twist, and the wonderful little property that makes it all possible is the <a target=\"_blank\" href=\"https://developer.mozilla.org/en/DOM/element.scrollHeight\">scrollHeight</a>.\n\nlines, not heights.\n",
    "teaser": "Dissatisfied with the quirks in existing solutions to autogrow textfields, I decide to attempt my own cross browser, cross operating system auto growing textfield."
  }
]